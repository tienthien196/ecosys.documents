"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2127],{8453:(n,r,t)=>{t.d(r,{R:()=>a,x:()=>s});var e=t(6540);const i={},o=e.createContext(i);function a(n){const r=e.useContext(o);return e.useMemo(function(){return"function"==typeof n?n(r):{...r,...n}},[r,n])}function s(n){let r;return r=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:a(n.components),e.createElement(o.Provider,{value:r},n.children)}},9632:(n,r,t)=>{t.r(r),t.d(r,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>a,metadata:()=>e,toc:()=>l});const e=JSON.parse('{"id":"Systems & Innovation/Systems/Compiler/CompilerTest","title":"CompilerTest","description":"COMPILER TO\xc0N DI\u1ec6N \u2013 H\xc0NH TR\xccNH T\u1eea M\xc3 NGU\u1ed2N \u0110\u1ebeN M\xc3 M\xc1Y (SINGLE PASS)","source":"@site/docs/01_Systems & Innovation/Systems/Compiler/CompilerTest.md","sourceDirName":"01_Systems & Innovation/Systems/Compiler","slug":"/Systems & Innovation/Systems/Compiler/CompilerTest","permalink":"/ecosys.documents/docs/Systems & Innovation/Systems/Compiler/CompilerTest","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"title":"CompilerTest","sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Compiler","permalink":"/ecosys.documents/docs/Systems & Innovation/Systems/Compiler/"},"next":{"title":"Interpreter","permalink":"/ecosys.documents/docs/Systems & Innovation/Systems/Interpreter/"}}');var i=t(4848),o=t(8453);const a={title:"CompilerTest",sidebar_position:1},s=void 0,c={},l=[];function m(n){const r={code:"code",pre:"pre",...(0,o.R)(),...n.components};return(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{children:'==========================================================================================================\r\n                  COMPILER TO\xc0N DI\u1ec6N \u2013 H\xc0NH TR\xccNH T\u1eea M\xc3 NGU\u1ed2N \u0110\u1ebeN M\xc3 M\xc1Y (SINGLE PASS)\r\n==========================================================================================================\r\n\r\n+-----------------------------------------------------------------------------------------+\r\n|                                 SOURCE CODE (input.c)                                   |\r\n|                                                                                         |\r\n|  int main() {                                                                           |\r\n|      int a = 5;                                                                         |\r\n|      int b = a + 3;                                                                     |\r\n|      return b * 2;                                                                      |\r\n|  }                                                                                      |\r\n|                                                                                         |\r\n+----------------------------------------+------------------------------------------------+\r\n                                         |\r\n                                         v\r\n                        +----------------------------------+\r\n                        |     LEXICAL ANALYSIS (Lexer)     |\r\n                        | - Chia m\xe3 th\xe0nh token            |\r\n                        | - D\xf9ng: Regex, Finite Automata   |\r\n                        |                                 |\r\n                        | Output:                         |\r\n                        | [int][main][(][)][{]            |\r\n                        | [int][a][=][5][;]                |\r\n                        | [int][b][=][a][+][3][;]          |\r\n                        | [return][b][*][2][;][}]          |\r\n                        +----------------+----------------+\r\n                                         |\r\n                                         v\r\n                        +----------------------------------+\r\n                        |     SYNTAX ANALYSIS (Parser)     |\r\n                        | - D\xf9ng CFG (Context-Free Grammar)|\r\n                        | - X\xe2y d\u1ef1ng c\xe2y c\xfa ph\xe1p (AST)     |\r\n                        |                                 |\r\n                        |          Function: main()        |\r\n                        |                 |                |\r\n                        |            CompoundStmt           |\r\n                        |            /      |      \\       |\r\n                        |     Decl(a=5)  Decl(b=a+3) Return |\r\n                        |                             |    |\r\n                        |                        BinOp(*, b, 2)\r\n                        +----------------+----------------+\r\n                                         |\r\n                                         v\r\n                        +----------------------------------+\r\n                        |    SEMANTIC ANALYSIS & SYMBOL TABLE |\r\n                        | - Ki\u1ec3m tra ki\u1ec3u, khai b\xe1o         |\r\n                        | - X\xe2y d\u1ef1ng Symbol Table           |\r\n                        |                                 |\r\n                        |  +-------------+------------------+ \r\n                        |  | Name | Type | Scope | Address  |\r\n                        |  +-------------+------------------+\r\n                        |  | main | func | global| 0x400500 |\r\n                        |  | a    | int  | main  | R1 / [FP-4]|\r\n                        |  | b    | int  | main  | R2 / [FP-8]|\r\n                        |  +-------------+------------------+\r\n                        | - Type checking: a + 3 \u2192 OK (int) |\r\n                        | - Error: undeclared var, type mismatch |\r\n                        +----------------+----------------+\r\n                                         |\r\n                                         v\r\n                        +----------------------------------+\r\n                        |   INTERMEDIATE CODE GENERATION   |\r\n                        | - T\u1ea1o m\xe3 trung gian (TAC, AST)   |\r\n                        |                                 |\r\n                        |  Three-Address Code (TAC):      |\r\n                        |     t1 = 5                      |\r\n                        |     a  = t1                     |\r\n                        |     t2 = a + 3                  |\r\n                        |     b  = t2                     |\r\n                        |     t3 = b * 2                  |\r\n                        |     return t3                   |\r\n                        |                                 |\r\n                        |  Control Flow Graph (CFG):      |\r\n                        |     [Entry] \u2192 [Basic Block] \u2192 [Return]\r\n                        +----------------+----------------+\r\n                                         |\r\n                                         v\r\n                        +----------------------------------+\r\n                        |          OPTIMIZATION            |\r\n                        | - X\u1eed l\xfd tr\xean IR (TAC ho\u1eb7c CFG)   |\r\n                        |                                 |\r\n                        | 1. Constant Folding:             |\r\n                        |     t1 = 5           \u2192 5         |\r\n                        |     t2 = 5 + 3       \u2192 8         |\r\n                        |     t3 = 8 * 2       \u2192 16        |\r\n                        |                                 |\r\n                        | 2. Dead Code Elimination:        |\r\n                        |     (n\u1ebfu c\xf3 code v\xf4 d\u1ee5ng)        |\r\n                        |                                 |\r\n                        | 3. Common Subexpression:         |\r\n                        |     x = a + b; y = a + b \u2192 t = a+b; x=t; y=t |\r\n                        |                                 |\r\n                        | Output t\u1ed1i \u01b0u:                   |\r\n                        |     return 16                    |\r\n                        +----------------+----------------+\r\n                                         |\r\n                                         v\r\n                        +----------------------------------+\r\n                        |        CODE GENERATION           |\r\n                        | - Chuy\u1ec3n IR \u2192 m\xe3 m\xe1y (x86-64)    |\r\n                        | - Register Allocation            |\r\n                        | - Instruction Selection          |\r\n                        | - Instruction Scheduling         |\r\n                        |                                 |\r\n                        |  V\xed d\u1ee5:                          |\r\n                        |     mov eax, 16                   |\r\n                        |     ret                           |\r\n                        |                                 |\r\n                        |  Register Allocation:            |\r\n                        |     - a \u2192 R1 (spilled? no)        |\r\n                        |     - b \u2192 R2 \u2192 nh\u01b0ng b\u1ecb t\u1ed1i \u01b0u b\u1ecf |\r\n                        |     \u2192 Kh\xf4ng c\u1ea7n thanh ghi!        |\r\n                        +----------------+----------------+\r\n                                         |\r\n                                         v\r\n                        +----------------------------------+\r\n                        |        ASSEMBLY OUTPUT           |\r\n                        | - M\xe3 h\u1ee3p ng\u1eef (assembly)          |\r\n                        |                                 |\r\n                        |     .text                        |\r\n                        |     .globl main                  |\r\n                        |  main:                           |\r\n                        |     movl $16, %eax               |\r\n                        |     ret                          |\r\n                        |                                 |\r\n                        +----------------+----------------+\r\n                                         |\r\n                                         v\r\n                        +----------------------------------+\r\n                        |       ASSEMBLER (as)             |\r\n                        | - Chuy\u1ec3n assembly \u2192 object code  |\r\n                        |   (file.o \u2013 ELF format)           |\r\n                        |                                 |\r\n                        |   +-------------------------+    |\r\n                        |   | ELF Header              |    |\r\n                        |   | .text (machine code)    |    |\r\n                        |   | .data (n\u1ebfu c\xf3)          |    |\r\n                        |   | Symbol Table (local)      |    |\r\n                        |   +-------------------------+    |\r\n                        +----------------+----------------+\r\n                                         |\r\n                                         v\r\n                        +----------------------------------+\r\n                        |       LINKER (ld)                |\r\n                        | - G\u1eafn v\u1edbi th\u01b0 vi\u1ec7n (libc, etc.)  |\r\n                        | - Gi\u1ea3i quy\u1ebft symbol ch\u01b0a bi\u1ebft    |\r\n                        | - T\u1ea1o executable (a.out)         |\r\n                        |                                 |\r\n                        |   +-------------------------+    |\r\n                        |   | .text (main + libc)     |    |\r\n                        |   | .data, .bss             |    |\r\n                        |   | Entry Point: _start     |    |\r\n                        |   +-------------------------+    |\r\n                        +----------------+----------------+\r\n                                         |\r\n                                         v\r\n                        +----------------------------------+\r\n                        |        EXECUTABLE (a.out)        |\r\n                        | - File nh\u1ecb ph\xe2n ch\u1ea1y \u0111\u01b0\u1ee3c        |\r\n                        | - \u0110\u01b0\u1ee3c OS n\u1ea1p v\xe0o RAM khi ch\u1ea1y   |\r\n                        |                                 |\r\n                        |   OS:                             |\r\n                        |     1. mmap .text v\xe0o memory     |\r\n                        |     2. C\u1ea5p ph\xe1t stack, heap      |\r\n                        |     3. Jump \u0111\u1ebfn \u0111i\u1ec3m v\xe0o (_start)|\r\n                        |     4. main() \u0111\u01b0\u1ee3c g\u1ecdi \u2192 return 16|\r\n                        +----------------------------------+\r\n\r\n+-----------------------------------------------------------------------------------------+\r\n|                                RUNTIME ENVIRONMENT                                      |\r\n|                                                                                         |\r\n|  +---------------------+     +---------------------+     +---------------------+      |\r\n|  |      Stack          |     |       Heap          |     |    Static Data      |      |\r\n|  | - Activation Records|     | - malloc, new       |     | - Global variables  |      |\r\n|  |   (Frame Pointer)   |     | - Garbage Collection|     | - String literals   |      |\r\n|  |   [main: a=5, b=8]  |     |                     |     |                     |      |\r\n|  +---------------------+     +---------------------+     +---------------------+      |\r\n|                                                                                         |\r\n|  +---------------------+                                                              |\r\n|  |   CPU Registers     |                                                              |\r\n|  | - RAX: return value | <--- mov eax, 16                                               |\r\n|  | - RSP: stack ptr    |                                                              |\r\n|  | - RIP: program counter|                                                            |\r\n|  +---------------------+                                                              |\r\n+-----------------------------------------------------------------------------------------+\r\n\r\nGHI CH\xda:\r\n- **Single-Pass Flow**: M\u1ed7i giai \u0111o\u1ea1n x\u1eed l\xfd xong \u2192 chuy\u1ec3n k\u1ebft qu\u1ea3 cho giai \u0111o\u1ea1n sau (kh\xf4ng l\u1eb7p l\u1ea1i).\r\n- **Symbol Table**: \u0110\u01b0\u1ee3c d\xf9ng t\u1eeb Parser \u0111\u1ebfn Code Gen, l\u01b0u th\xf4ng tin bi\u1ebfn.\r\n- **IR (Intermediate Representation)**: L\xe0 "ng\xf4n ng\u1eef chung" gi\u1eefa frontend v\xe0 backend.\r\n- **Optimization**: X\u1ea3y ra tr\xean IR \u2192 \u0111\u1ed9c l\u1eadp ki\u1ebfn tr\xfac, d\u1ec5 \xe1p d\u1ee5ng.\r\n- **Register Allocation**: N\u1ebfu bi\u1ebfn kh\xf4ng d\xf9ng \u2192 kh\xf4ng c\u1ea7n c\u1ea5p thanh ghi (spilled ho\u1eb7c b\u1ecf).\r\n- **Dead Code Elimination**: Bi\u1ebfn kh\xf4ng d\xf9ng \u2192 x\xf3a kh\u1ecfi m\xe3.\r\n- **Constant Folding**: T\xednh to\xe1n t\u1ea1i th\u1eddi \u0111i\u1ec3m bi\xean d\u1ecbch \u2192 t\u0103ng t\u1ed1c \u0111\u1ed9 ch\u1ea1y.\r\n- **Linker**: G\u1eafn v\u1edbi h\xe0m nh\u01b0 `printf`, `malloc` trong libc.\r\n- **Runtime**: Khi ch\u01b0\u01a1ng tr\xecnh ch\u1ea1y, OS t\u1ea1o stack, heap, n\u1ea1p m\xe3 v\xe0o RAM.\r\n\n'})})}function p(n={}){const{wrapper:r}={...(0,o.R)(),...n.components};return r?(0,i.jsx)(r,{...n,children:(0,i.jsx)(m,{...n})}):m(n)}}}]);