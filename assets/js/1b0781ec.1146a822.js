"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2868],{5236:(n,r,e)=>{e.r(r),e.d(r,{assets:()=>h,contentTitle:()=>o,default:()=>a,frontMatter:()=>i,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"Computer Fundamentals/Computer Architecture/ISA","title":"ISA","description":"---","source":"@site/docs/00_Computer Fundamentals/Computer Architecture/ISA.md","sourceDirName":"00_Computer Fundamentals/Computer Architecture","slug":"/Computer Fundamentals/Computer Architecture/ISA","permalink":"/ecosys.documents/docs/Computer Fundamentals/Computer Architecture/ISA","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Core","permalink":"/ecosys.documents/docs/Computer Fundamentals/Computer Architecture/Core"},"next":{"title":"cheatsheet_arch","permalink":"/ecosys.documents/docs/Computer Fundamentals/Computer Architecture/cheatsheet_arch"}}');var s=e(4848),c=e(8453);const i={},o=void 0,h={},l=[];function d(n){const r={blockquote:"blockquote",code:"code",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,c.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{children:"+-------------------------------------------------------------+\r\n|               ISA - Instruction Set Architecture            |\r\n|   (Giao di\u1ec7n gi\u1eefa ph\u1ea7n m\u1ec1m v\xe0 ph\u1ea7n c\u1ee9ng)                    |\r\n+-------------------------------------------------------------+\r\n\r\n+----------------+     +---------------------+     +-------------+\r\n|                |     |                     |     |             |\r\n|  Assembly Code | --\x3e |   Machine Code      | --\x3e |  Microcode  |\r\n|  (ADD R1,R2,R3)|     |  (32-bit: 0x00234020)|    |  (Optional) |\r\n|                |     |                     |     |             |\r\n+----------------+     +----------+----------+     +-------------+\r\n                                  |\r\n                                  v\r\n           +--------------------------------------------------+\r\n           |               CPU EXECUTION FLOW                 |\r\n           +--------------------------------------------------+\r\n           | 1. FETCH: L\u1ea5y l\u1ec7nh t\u1eeb Memory \u2192 IR                |\r\n           |    [PC] \u2192 Address Bus \u2192 Memory \u2192 Data Bus \u2192 IR   |\r\n           |                                                  |\r\n           | 2. DECODE: Gi\u1ea3i m\xe3 l\u1ec7nh \u2192 x\xe1c \u0111\u1ecbnh:              |\r\n           |    - Lo\u1ea1i l\u1ec7nh (R-type, I-type, J-type)          |\r\n           |    - Thanh ghi ngu\u1ed3n (Rs, Rt), \u0111\xedch (Rd)         |\r\n           |    - Opcode & Function field                     |\r\n           |                                                  |\r\n           | 3. EXECUTE: ALU th\u1ef1c hi\u1ec7n ph\xe9p to\xe1n              |\r\n           |    V\xed d\u1ee5: R1 = R2 + R3                           |\r\n           |                                                  |\r\n           | 4. MEMORY ACCESS (n\u1ebfu c\u1ea7n):                      |\r\n           |    - LOAD: \u0110\u1ecdc d\u1eef li\u1ec7u t\u1eeb RAM                    |\r\n           |    - STORE: Ghi d\u1eef li\u1ec7u v\xe0o RAM                  |\r\n           |                                                  |\r\n           | 5. WRITE BACK: Ghi k\u1ebft qu\u1ea3 v\xe0o thanh ghi (Rd)    |\r\n           +--------------------------------------------------+\r\n\r\n+-----------------------------------------------------------------------+\r\n|                        ISA COMPONENTS                                 |\r\n+----------------------------+----------------------+---------------------+\r\n|   R-TYPE (Register)        |   I-TYPE (Immediate) |   J-TYPE (Jump)     |\r\n| Opcode | Rs | Rt | Rd |Sh|F| Opcode | Rs | Rt | Addr | Opcode | Target |\r\n| 6b     | 5b | 5b | 5b |5b|6b| 6b     | 5b | 5b | 16b  | 6b     | 26b   |\r\n+----------------------------+----------------------+---------------------+\r\n| EX: ADD R1,R2,R3           | EX: LW R1,4(R2)      | EX: J loop         |\r\n| (T\xednh to\xe1n gi\u1eefa thanh ghi) | (T\u1ea3i t\u1eeb b\u1ed9 nh\u1edb)      | (Nh\u1ea3y \u0111\u1ebfn nh\xe3n)    |\r\n+----------------------------+----------------------+---------------------+\r\n\r\n+------------------------+     +-------------------------+\r\n| Supported Data Types   |     | Addressing Modes        |\r\n| - Byte (8-bit)         |     | - Immediate: #5         |\r\n| - Halfword (16-bit)    |     | - Register: R1          |\r\n| - Word (32-bit)        |     | - Base + Offset: 4(R2)  |\r\n| - Single/Double Float  |     | - PC-relative: loop     |\r\n+------------------------+     +-------------------------+\r\n\r\n+-------------------------------------------------------------+\r\n| Key Features of ISA                                         |\r\n| - T\u1eadp l\u1ec7nh (ADD, SUB, LW, SW, BEQ, J, ...)                  |\r\n| - S\u1ed1 l\u01b0\u1ee3ng thanh ghi (R0\u2013R31)                               |\r\n| - \u0110\u1ecbnh d\u1ea1ng l\u1ec7nh (3 lo\u1ea1i ch\xednh)                            |\r\n| - C\xe1ch \u0111\u1ecbnh \u0111\u1ecba ch\u1ec9 (addressing modes)                      |\r\n| - H\u1ed7 tr\u1ee3 ng\u1eaft (interrupts) v\xe0 ngo\u1ea1i l\u1ec7 (exceptions)         |\r\n| - Giao di\u1ec7n ABI (Application Binary Interface)              |\r\n+-------------------------------------------------------------+\n"})}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{children:"==========================================================================================================\r\n                   CPU CORE TO\xc0N DI\u1ec6N \u2013 B\u1ea2N CH\u1ea4T T\u1eea L\u1ec6NH \u0110\u1ebeN TH\u1ef0C THI\r\n==========================================================================================================\r\n\r\n                                    +----------------------------+\r\n                                    |       CLOCK SIGNAL         |\r\n                                    | (e.g., 3.5 GHz)            |\r\n                                    +--------------+-------------+\r\n                                                   |\r\n                                                   v\r\n                    +------------------------------------------------------------------+\r\n                    |                        CONTROL UNIT (CU)                           |\r\n                    | - Gi\u1ea3i m\xe3 l\u1ec7nh (Instruction Decode)                              |\r\n                    | - \u0110i\u1ec1u ph\u1ed1i lu\u1ed3ng th\u1ef1c thi                                       |\r\n                    | - T\u1ea1o t\xedn hi\u1ec7u \u0111i\u1ec1u khi\u1ec3n (control signals)                      |\r\n                    | - Qu\u1ea3n l\xfd pipeline stages: IF \u2192 ID \u2192 EX \u2192 MEM \u2192 WB               |\r\n                    +----------------------------+-------------------------------------+\r\n                                                 |\r\n       +----------------------------------------+----------------------------------------+\r\n       |                                        |                                        |\r\n       v                                        v                                        v\r\n+--------------+                     +---------------------+                  +------------------+\r\n| INSTRUCTION  |                     |   INSTRUCTION       |                  |   REGISTER FILE  |\r\n|  FETCH (IF)  |<---\x3e L1i Cache <----|   DECODE (ID)       |<-----------------| (General Purpose)|\r\n|              |   (32KB, 8-way)     |                     |    Register     | RAX, RBX, RCX, ...|\r\n| - PC \u2192 Addr  |                     | - Opcode \u2192 \xb5ops     |    Renaming     | RSP, RBP, RDI, ...|\r\n| - Fetch inst |                     | - Decode engine     |    (Tomasulo)   | (128/256-bit)     |\r\n| - PC += 4    |                     | - Dispatch to RS    |                 +--------+---------+\r\n+--------------+                     +---------------------+                          |\r\n       |                                        |                                      |\r\n       |                                        v                                      |\r\n       |                             +------------------------+                        |\r\n       |                             |    REORDER BUFFER (ROB)|                        |\r\n       |                             | - Gi\u1eef l\u1ec7nh theo th\u1ee9 t\u1ef1 |                        |\r\n       |                             |   xu\u1ea5t hi\u1ec7n (program order)                    |\r\n       |                             | - Commit k\u1ebft qu\u1ea3 cu\u1ed1i c\xf9ng                    |\r\n       |                             +------------------------+                        |\r\n       |                                        |                                       |\r\n       |                                        v                                       |\r\n       |                             +------------------------+                        |\r\n       |                             |    RESERVATION STATIONS  | <--------------------+\r\n       |                             | (RS - Issue Queue)       |    Operand t\u1eeb RF ho\u1eb7c\r\n       |                             | - Ch\u1edd operand s\u1eb5n s\xe0ng   |    bypass network\r\n       |                             | - Ready \u2192 \u0111\u01b0a v\xe0o EX     |\r\n       |                             +------------------------+\r\n       |                                        |\r\n       |                                        v\r\n       |                    +--------------------------------------------------+\r\n       |                    |               EXECUTION UNITS (\xd7N)               |\r\n       |                    |                                                  |\r\n       |        +-----------+-----------+     +----------------------+       |\r\n       |        |   ARITHMETIC LOGIC    |     |   FLOATING-POINT     |       |\r\n       |        |       UNIT (ALU)      |     |     UNIT (FPU)       |       |\r\n       |        | - ADD, SUB, AND, OR   |     | - ADD, MUL, DIV (FP) |       |\r\n       |        | - LEA, INC, DEC       |     | - SIMD (SSE/AVX)     |       |\r\n       |        | - 4 units (port 0,1,5)|     | - 2 units (port 1,5) |       |\r\n       |        +-----------+-----------+     +----------+-----------+       |\r\n       |                    |                            |                   |\r\n       |        +-----------v-----------+     +----------v-----------+       |\r\n       |        |   BRANCH UNIT         |     |   LOAD/STORE UNIT    |       |\r\n       |        | - Compare, JUMP       |     | - AGU (Address Gen)  |       |\r\n       |        | - Branch Prediction   |     | - D-Cache interface  |       |\r\n       |        |   (BTB, RAS)          |     | - 2 Load, 1 Store    |       |\r\n       |        +-----------+-----------+     +----------+-----------+       |\r\n       |                    |                            |                   |\r\n       +--------------------+----------------------------+-------------------+\r\n                            |                            |\r\n                            v                            v\r\n                   +--------------+             +------------------+\r\n                   | BRANCH TARGET|             |   DATA CACHE     |\r\n                   |   BUFFER     |             |   (L1d, 48KB)      |\r\n                   | (BTB) & RAS  |             | 8-way, 64B/line    |\r\n                   | - D\u1ef1 \u0111o\xe1n nh\u1ea3y|             +---------+--------+\r\n                   +--------------+                       |\r\n                                                        v\r\n                                               +------------------+\r\n                                               |   L2 CACHE (per-core)  |\r\n                                               | 1.5MB, inclusive     |\r\n                                               | Low-latency (~12 cycles)|\r\n                                               +----------+-----------+\r\n                                                          |\r\n                                                          v\r\n                                          +----------------------------------+\r\n                                          |    LAST-LEVEL CACHE (LLC)        |\r\n                                          |            L3 Cache              |\r\n                                          | - Shared gi\u1eefa c\xe1c core (e.g., 30MB)|\r\n                                          | - Ring/Mesh Bus                  |\r\n                                          | - Coherence: MESI/MOESI Protocol |\r\n                                          +------------------+---------------+\r\n                                                             |\r\n                                                             | (Memory Bus - IMC)\r\n                                                             v\r\n                                          +----------------------------------+\r\n                                          |           MAIN MEMORY            |\r\n                                          | (DDR5, 4800 MT/s)                |\r\n                                          | - DRAM Controller (IMC)          |\r\n                                          +----------------------------------+\r\n\r\n                                                                 ^\r\n                                                                 | (Write Back)\r\n                                                                 |\r\n+------------------------------------------------------------------------------------------------------------------+\r\n|                                          WRITE-BACK & MEMORY HIERARCHY                                           |\r\n|                                                                                                                  |\r\n|  +----------------------+     +----------------------+     +-------------------------------+                   |\r\n|  |   MEMORY ACCESS      | <-- |   WRITE BACK (WB)    | <-- |   EXECUTION (EX)              |                   |\r\n|  |   (MEM)              |     | - Ghi k\u1ebft qu\u1ea3 v\xe0o RF |     | - ALU/FPU ho\xe0n t\u1ea5t              |                   |\r\n|  | - Load: RF \u2190 [addr]  |     | - C\u1eadp nh\u1eadt ROB       |     | - Store: x\u1ebfp h\xe0ng ch\u1edd ghi       |                   |\r\n|  | - Store: [addr] \u2190 RF |     | - Commit theo th\u1ee9 t\u1ef1 |     |                                |                   |\r\n|  +----------------------+     +----------------------+     +-------------------------------+                   |\r\n|                                                                                                                  |\r\n|  \u2705 ROB \u0111\u1ea3m b\u1ea3o: d\xf9 th\u1ef1c thi out-of-order, k\u1ebft qu\u1ea3 v\u1eabn commit theo \u0111\xfang th\u1ee9 t\u1ef1 ch\u01b0\u01a1ng tr\xecnh                     |\r\n+------------------------------------------------------------------------------------------------------------------+\r\n\r\n                                                                 ^\r\n                                                                 | (Interrupt & System Call)\r\n                                                                 |\r\n+------------------------------------------------------------------------------------------------------------------+\r\n|                                          EXCEPTION & INTERRUPT HANDLING                                          |\r\n|                                                                                                                  |\r\n|  +----------------------+     +----------------------+     +-------------------------------+                   |\r\n|  |   EXCEPTIONS         |     |   INTERRUPTS (IRQ)   |     |   SYSTEM CALLS                |                   |\r\n|  | - Page Fault         |     | - Timer (1ms)        |     | - syscall instruction         |                   |\r\n|  | - Divide by Zero     |     | - Keyboard, Disk     |     | - Chuy\u1ec3n sang kernel mode     |                   |\r\n|  | - Invalid Opcode     |     | - GPU, Network       |     | - G\u1ecdi kernel function         |                   |\r\n|  +----------------------+     +----------------------+     +-------------------------------+                   |\r\n|         |                            |                                 |                                       |\r\n|         +----------------------------+---------------------------------+                                       |\r\n|                                          |                                                                       |\r\n|                                          v                                                                       |\r\n|                                  [TRAP to Kernel Mode]                                                           |\r\n|                                  \u2192 OS x\u1eed l\xfd \u2192 quay l\u1ea1i ch\u01b0\u01a1ng tr\xecnh                                              |\r\n+------------------------------------------------------------------------------------------------------------------+\r\n\r\n                                                                 ^\r\n                                                                 | (Parallelism & Optimization)\r\n                                                                 |\r\n+------------------------------------------------------------------------------------------------------------------+\r\n|                                          ADVANCED FEATURES                                                       |\r\n|                                                                                                                  |\r\n|  +----------------------+     +----------------------+     +-------------------------------+                   |\r\n|  |   OUT-OF-ORDER EXEC  |     |   SUPERSCALAR        |     |   SPECULATIVE EXECUTION       |                   |\r\n|  | - Tomasulo Algorithm |     | - Nhi\u1ec1u l\u1ec7nh/cycle   |     | - D\u1ef1 \u0111o\xe1n nh\xe1nh \u2192 th\u1ef1c thi tr\u01b0\u1edbc|                   |\r\n|  | - ROB + RS + Bypass  |     | - 6 ports ph\xe1t h\xe0nh  |     | - Rollback n\u1ebfu sai             |                   |\r\n|  +----------------------+     +----------------------+     +-------------------------------+                   |\r\n|                                                                                                                  |\r\n|  +----------------------+     +----------------------+     +-------------------------------+                   |\r\n|  |   SIMD (SSE/AVX)     |     |   POWER MANAGEMENT   |     |   MICROCODE                   |                   |\r\n|  | - X\u1eed l\xfd 8/16 s\u1ed1 c\xf9ng|     | - P-states, C-states |     | - Firmware cho l\u1ec7nh ph\u1ee9c      |                   |\r\n|  |   l\xfac (vector)       |     | - Dynamic voltage    |     | - C\u1eadp nh\u1eadt qua BIOS           |                   |\r\n|  +----------------------+     |   & frequency scaling|     +-------------------------------+                   |\r\n|                                +----------------------+                                                         |\r\n+------------------------------------------------------------------------------------------------------------------+\n"})}),"\n",(0,s.jsx)(r.blockquote,{children:"\n"}),"\n",(0,s.jsx)(r.p,{children:"GHI CH\xda:"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Pipeline Stages"}),":\r\nIF: Fetch \u2192 ID: Decode \u2192 EX: Execute \u2192 MEM: Memory Access \u2192 WB: Write Back"]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Out-of-Order Execution"}),":"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"L\u1ec7nh c\xf3 th\u1ec3 th\u1ef1c thi kh\xf4ng theo th\u1ee9 t\u1ef1 \u2192 nh\u01b0ng cam k\u1ebft (commit) theo \u0111\xfang th\u1ee9 t\u1ef1 nh\u1edd ROB"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Register Renaming"}),":"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["Tr\xe1nh false dependency (vd: ",(0,s.jsx)(r.code,{children:"mov rax, 1"})," \u2192 ",(0,s.jsx)(r.code,{children:"add rax, 2"})," \u2192 ",(0,s.jsx)(r.code,{children:"mov rax, 3"}),") \u2192 rax c\u0169 v\xe0 m\u1edbi \u0111\u01b0\u1ee3c \xe1nh x\u1ea1 sang thanh ghi v\u1eadt l\xfd kh\xe1c nhau"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Branch Prediction"}),":"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"BTB (Branch Target Buffer): l\u01b0u \u0111\u1ecba ch\u1ec9 nh\u1ea3y"}),"\n",(0,s.jsxs)(r.li,{children:["RAS (Return Address Stack): d\u1ef1 \u0111o\xe1n l\u1ec7nh ",(0,s.jsx)(r.code,{children:"ret"})]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Bypass Network (Forwarding)"}),":"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"K\u1ebft qu\u1ea3 t\u1eeb EX \u2192 tr\u1ef1c ti\u1ebfp \u0111\u1ebfn RS ho\u1eb7c ID \u2192 kh\xf4ng ch\u1edd WB \u2192 t\u0103ng hi\u1ec7u su\u1ea5t"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"L1i / L1d"}),": T\xe1ch ri\xeang cache l\u1ec7nh v\xe0 d\u1eef li\u1ec7u \u2192 tr\xe1nh xung \u0111\u1ed9t"]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"L2"}),": Ri\xeang cho t\u1eebng core"]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"L3"}),": Chung cho t\u1ea5t c\u1ea3 core, d\xf9ng giao th\u1ee9c ",(0,s.jsx)(r.strong,{children:"cache coherence (MESI)"})," \u0111\u1ec3 \u0111\u1ed3ng b\u1ed9"]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"IMC (Integrated Memory Controller)"}),": N\u1eb1m trong CPU die \u2192 gi\u1ea3m \u0111\u1ed9 tr\u1ec5 truy c\u1eadp RAM"]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"System Call"}),": D\xf9ng l\u1ec7nh ",(0,s.jsx)(r.code,{children:"syscall"})," \u2192 trap v\xe0o kernel \u2192 chuy\u1ec3n sang Ring 0"]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Microcode"}),": Nh\u01b0 firmware c\u1ee7a CPU, x\u1eed l\xfd c\xe1c l\u1ec7nh ph\u1ee9c t\u1ea1p (vd: ",(0,s.jsx)(r.code,{children:"string"})," instructions)"]}),"\n"]}),"\n"]})]})}function a(n={}){const{wrapper:r}={...(0,c.R)(),...n.components};return r?(0,s.jsx)(r,{...n,children:(0,s.jsx)(d,{...n})}):d(n)}},8453:(n,r,e)=>{e.d(r,{R:()=>i,x:()=>o});var t=e(6540);const s={},c=t.createContext(s);function i(n){const r=t.useContext(c);return t.useMemo(function(){return"function"==typeof n?n(r):{...r,...n}},[r,n])}function o(n){let r;return r=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:i(n.components),t.createElement(c.Provider,{value:r},n.children)}}}]);