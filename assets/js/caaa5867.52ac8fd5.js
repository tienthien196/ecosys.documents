"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1935],{7828:(n,e,s)=>{s.r(e),s.d(e,{assets:()=>a,contentTitle:()=>c,default:()=>o,frontMatter:()=>t,metadata:()=>i,toc:()=>h});const i=JSON.parse('{"id":"Systems & Innovation/Systems/Compiler/Compiler","title":"Compiler","description":"TR\xccNH BI\xcaN D\u1ecaCH TO\xc0N DI\u1ec6N \u2013 B\u1ea2N CH\u1ea4T T\u1eea M\xc3 NGU\u1ed2N \u0110\u1ebeN M\xc3 M\xc1Y","source":"@site/docs/01_Systems & Innovation/Systems/Compiler/Compiler.md","sourceDirName":"01_Systems & Innovation/Systems/Compiler","slug":"/Systems & Innovation/Systems/Compiler/","permalink":"/ecosys.documents/docs/Systems & Innovation/Systems/Compiler/","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"title":"Compiler","sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Artificial Intelligence","permalink":"/ecosys.documents/docs/Systems & Innovation/Innovation Techs/Artificial Intelligence/"},"next":{"title":"CompilerTest","permalink":"/ecosys.documents/docs/Systems & Innovation/Systems/Compiler/CompilerTest"}}');var r=s(4848),l=s(8453);const t={title:"Compiler",sidebar_position:1},c=void 0,a={},h=[{value:"1. COMPILER",id:"1-compiler",level:2},{value:"1.1. Introduction to Compilers",id:"11-introduction-to-compilers",level:3},{value:"1.2. Compiler Phases (C\xe1c giai \u0111o\u1ea1n)",id:"12-compiler-phases-c\xe1c-giai-\u0111o\u1ea1n",level:3},{value:"1.3. Runtime Environment",id:"13-runtime-environment",level:3},{value:"1.4. Parsing Techniques",id:"14-parsing-techniques",level:3},{value:"1.5. Code Optimization Techniques",id:"15-code-optimization-techniques",level:3},{value:"1.6. Register Allocation",id:"16-register-allocation",level:3},{value:"1.7. Garbage Collection (GC)",id:"17-garbage-collection-gc",level:3},{value:"1.8. Compiler Frontend &amp; Backend",id:"18-compiler-frontend--backend",level:3},{value:"1.9. Tools &amp; Frameworks",id:"19-tools--frameworks",level:3},{value:"1.10. Just-In-Time (JIT) Compilation",id:"110-just-in-time-jit-compilation",level:3},{value:"Formulas",id:"formulas",level:2},{value:"COMPILER\r\n|",id:"compiler",level:2},{value:"Rules of Thumb",id:"rules-of-thumb",level:2},{value:"The 90/10 Rule (Optimization)",id:"the-9010-rule-optimization",level:3},{value:"Premature Optimization Rule (Donald Knuth)",id:"premature-optimization-rule-donald-knuth",level:3},{value:"Parse Table Size Rule",id:"parse-table-size-rule",level:3},{value:"Register Allocation Rule",id:"register-allocation-rule",level:3},{value:"Three-Address Code Rule",id:"three-address-code-rule",level:3},{value:"AST vs Parse Tree",id:"ast-vs-parse-tree",level:3},{value:"GC Pause Rule",id:"gc-pause-rule",level:3},{value:"LLVM Rule",id:"llvm-rule",level:3}];function d(n){const e={admonition:"admonition",annotation:"annotation",blockquote:"blockquote",br:"br",code:"code",h2:"h2",h3:"h3",hr:"hr",li:"li",math:"math",mfrac:"mfrac",mi:"mi",mn:"mn",mo:"mo",mrow:"mrow",msub:"msub",mtext:"mtext",ol:"ol",p:"p",pre:"pre",semantics:"semantics",span:"span",strong:"strong",ul:"ul",...(0,l.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:'==========================================================================================================\r\n                  TR\xccNH BI\xcaN D\u1ecaCH TO\xc0N DI\u1ec6N \u2013 B\u1ea2N CH\u1ea4T T\u1eea M\xc3 NGU\u1ed2N \u0110\u1ebeN M\xc3 M\xc1Y\r\n==========================================================================================================\r\n\r\n+---------------------------------------------------------------------------------------------------------+\r\n|                                         SOURCE CODE (User)                                            |\r\n|                                                                                                         |\r\n|   int factorial(int n) {                                                                                |\r\n|       if (n <= 1) return 1;                                                                             |\r\n|       return n * factorial(n - 1);                                                                      |\r\n|   }                                                                                                     |\r\n|                                                                                                         |\r\n|  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  |\r\n|  \u2502            HIGH-LEVEL LANGUAGE (C, Rust, Java...) \u2192 Human-readable, portable                    \u2502  |\r\n|  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  |\r\n|                                                                                                         |\r\n+---------------------------------------------------------------------------------------------------------+\r\n                                          |\r\n                                          | (Compilation Pipeline)\r\n                                          v\r\n+---------------------------------------------------------------------------------------------------------+\r\n|                                        COMPILER FRONTEND                                              |\r\n|                                                                                                         |\r\n|  +----------------------+     +----------------------+     +-------------------------------+           |\r\n|  |   LEXICAL ANALYSIS   |     |   SYNTAX ANALYSIS    |     |   SEMANTIC ANALYSIS           |           |\r\n|  | (Scanner / Lexer)    |     | (Parser)             |     |                               |           |\r\n|  |                      |     |                      |     |  +--------------------------+ |           |\r\n|  | Input: char stream   | --\x3e | Input: tokens        | --\x3e |  | Symbol Table             | |           |\r\n|  | Output: tokens       |     | Output: AST          |     |  | - n: int, scope: global  | |           |\r\n|  |                      |     |                      |     |  | - factorial(): int(int)  | |           |\r\n|  | Example:             |     | Grammar:             |     |  +------------+-------------+ |           |\r\n|  | int \u2192 KEYWORD        |     | S \u2192 func_def         |     |               |               |           |\r\n|  | n   \u2192 IDENTIFIER     |     | func_def \u2192 type ID(\u2026) |     |  +------------v-------------+ |           |\r\n|  | =   \u2192 OPERATOR       |     |                      |     |  | Type Checking            | |           |\r\n|  | ;   \u2192 SEPARATOR      |     | Uses: CFG, LL/LR     |     |  | - int * int \u2192 int        | |           |\r\n|  +----------------------+     +----------+-----------+     |  | - No undeclared vars     | |           |\r\n|                                          |                 |  +--------------------------+ |           |\r\n|                                          v                 +-------------------------------+           |\r\n|                                +------------------+                                                  |\r\n|                                |   ABSTRACT SYNTAX  |                                                 |\r\n|                                |   TREE (AST)       |                                                 |\r\n|                                |                    |                                                 |\r\n|                                |   Function: "factorial"                                               |\r\n|                                |     Params: n (int)                                                   |\r\n|                                |     Body:                                                               |\r\n|                                |       If (n <= 1)                                                       |\r\n|                                |         Return 1                                                        |\r\n|                                |       Else                                                              |\r\n|                                |         Return n * factorial(n-1)                                       |\r\n|                                +--------------------+                                                  |\r\n+------------------------------------------------------+--------------------------------------------------+\r\n                                                       |\r\n                                                       | (Intermediate Representation)\r\n                                                       v\r\n+---------------------------------------------------------------------------------------------------------+\r\n|                                     INTERMEDIATE REPRESENTATION (IR)                                    |\r\n|                                                                                                         |\r\n|  +-----------------------------+     +----------------------------+     +------------------------+     |\r\n|  | Three-Address Code (TAC)    |     | Control Flow Graph (CFG)   |     | LLVM IR / Bytecode     |     |\r\n|  |                             |     |                            |     |                        |     |\r\n|  | t1 = n <= 1                 |     |       +--------+         |     | define i32 @factorial   |     |\r\n|  | if t1 goto L1               |     |       | Entry  |         |     | (i32 %n) {              |     |\r\n|  | t2 = n - 1                  | --\x3e |       +--------+         | --\x3e |   %cmp = icmp sle i32   |     |\r\n|  | t3 = call factorial(t2)     |     |         |                |     |   %n, 1                 |     |\r\n|  | t4 = n * t3                 |     |         v                |     |   br i1 %cmp, label %if,|     |\r\n|  | return t4                   |     |   +-------------+        |     |       label %else       |     |\r\n|  | L1: return 1                |     |   | if (n<=1) |        |     | }                       |     |\r\n|  +-----------------------------+     |   +-------------+        |     +------------------------+     |\r\n|                                     |         |                |                                     |\r\n|                                     |         v                |                                     |\r\n|                                     |   +-------------+        |                                     |\r\n|                                     |   | return 1    |        |                                     |\r\n|                                     |   +-------------+        |                                     |\r\n|                                     |         ^                |                                     |\r\n|                                     |         |                |                                     |\r\n|                                     |   +-------------+        |                                     |\r\n|                                     |   | n * fact(...) |        |                                     |\r\n|                                     |   +-------------+        |                                     |\r\n|                                     |         |                |                                     |\r\n|                                     |       +--------+         |                                     |\r\n|                                     |       | Exit   |         |                                     |\r\n|                                     |       +--------+         |                                     |\r\n|                                     +----------------------------+                                     |\r\n|                                                                                                         |\r\n|  \u2705 IR: \u0110\u1ed9c l\u1eadp ng\xf4n ng\u1eef & ki\u1ebfn tr\xfac \u2192 d\u1ec5 t\u1ed1i \u01b0u v\xe0 t\xe1i s\u1eed d\u1ee5ng                                         |\r\n+---------------------------------------------------------------------------------------------------------+\r\n                                                       |\r\n                                                       | (Optimization Passes)\r\n                                                       v\r\n+---------------------------------------------------------------------------------------------------------+\r\n|                                         OPTIMIZATION ENGINE                                             |\r\n|                                                                                                         |\r\n|  +----------------------+     +----------------------+     +-------------------------------+           |\r\n|  | Local Optimization   |     | Global Optimization  |     | Loop & Inter-procedural       |           |\r\n|  | (Basic Block)        |     | (Function-wide)      |     | Optimization                  |           |\r\n|  | - Constant Folding   |     | - Live Variable      |     | - Loop Invariant Motion       |           |\r\n|  |   2+3 \u2192 5            |     |   Analysis           |     | - Function Inlining           |           |\r\n|  | - Dead Code Removal  |     | - Available Exprs    |     | - Devirtualization            |           |\r\n|  |   if(0) \u2192 remove     |     | - Reaching Defs      |     |                               |           |\r\n|  +----------+-----------+     +----------+-----------+     +---------------+---------------+           |\r\n|            |                            |                                 |                           |\r\n|            +----------------------------+---------------------------------+                           |\r\n|                                         | (Optimized IR)                                                |\r\n|                                         v                                                             |\r\n|  +-----------------------------+                                                                      |\r\n|  | Optimized TAC / LLVM IR     |                                                                      |\r\n|  |                             |                                                                      |\r\n|  | t1 = n <= 1                 |                                                                      |\r\n|  | br t1, L1, L2                 |                                                                      |\r\n|  | L2:                         |                                                                      |\r\n|  |   t2 = n - 1                |                                                                      |\r\n|  |   t3 = factorial(t2)        |                                                                      |\r\n|  |   t4 = n * t3               |                                                                      |\r\n|  |   return t4                 |                                                                      |\r\n|  | L1: return 1                |                                                                      |\r\n|  +-----------------------------+                                                                      |\r\n+---------------------------------------------------------------------------------------------------------+\r\n                                                       |\r\n                                                       | (Code Generation)\r\n                                                       v\r\n+---------------------------------------------------------------------------------------------------------+\r\n|                                          CODE GENERATION (BACKEND)                                    |\r\n|                                                                                                         |\r\n|  +----------------------+     +----------------------+     +-------------------------------+           |\r\n|  | Instruction Selection|     | Register Allocation  |     | Instruction Scheduling        |           |\r\n|  | - Ch\u1ecdn l\u1ec7nh m\xe1y ph\xf9  |     | - G\xe1n bi\u1ebfn v\xe0o thanh|     | - S\u1eafp x\u1ebfp l\u1ec7nh \u0111\u1ec3 pipeline     |           |\r\n|  |   h\u1ee3p: add, mul, call| --\x3e |   ghi (register)      | --\x3e |   hi\u1ec7u qu\u1ea3 (avoid stalls)      |           |\r\n|  | - D\xf9ng pattern       |     | - N\u1ebfu kh\xf4ng \u0111\u1ee7: spill|     | - V\xed d\u1ee5: di chuy\u1ec3n load l\xean   |           |\r\n|  |   matching (LLVM)    |     |   ra b\u1ed9 nh\u1edb (stack)   |     |   tr\u01b0\u1edbc khi d\xf9ng               |           |\r\n|  +----------+-----------+     +----------+-----------+     +-------------------------------+           |\r\n|            |                            |                                                             |\r\n|            +----------------------------+                                                             |\r\n|                                         |                                                             |\r\n|                                         v                                                             |\r\n|  +---------------------------------------------------------------------------------------------+      |\r\n|  |                                   MACHINE CODE (x86-64)                                   |      |\r\n|  |                                                                                           |      |\r\n|  |   factorial:                                                                            |      |\r\n|  |     cmp edi, 1        ; so s\xe1nh n v\u1edbi 1                                                 |      |\r\n|  |     jle .L1           ; n\u1ebfu n<=1 \u2192 nh\u1ea3y                                               |      |\r\n|  |     push rbx          ; l\u01b0u thanh ghi                                                 |      |\r\n|  |     mov ebx, edi      ; ebx = n                                                       |      |\r\n|  |     dec edi           ; n-1                                                           |      |\r\n|  |     call factorial    ; \u0111\u1ec7 quy                                                       |      |\r\n|  |     imul eax, ebx     ; n * k\u1ebft qu\u1ea3                                                  |      |\r\n|  |     pop rbx           ; ph\u1ee5c h\u1ed3i                                                    |      |\r\n|  |     ret               ; tr\u1ea3 v\u1ec1                                                      |      |\r\n|  |   .L1:                                                                              |      |\r\n|  |     mov eax, 1        ; return 1                                                    |      |\r\n|  |     ret                                                                             |      |\r\n|  |                                                                                           |      |\r\n|  |  \u2192 Output: Object file (.o) \u2192 li\xean k\u1ebft (linker) \u2192 executable                           |      |\r\n|  +---------------------------------------------------------------------------------------------+      |\r\n+---------------------------------------------------------------------------------------------------------+\r\n                                          |\r\n                                          | (Linking)\r\n                                          v\r\n+---------------------------------------------------------------------------------------------------------+\r\n|                                           LINKER & LOADER                                             |\r\n|                                                                                                         |\r\n|  +----------------------+     +----------------------+                                                 |\r\n|  | Static Linker        |     | Dynamic Loader       |                                                 |\r\n|  | - Gh\xe9p nhi\u1ec1u .o file  |     | - N\u1ea1p executable v\xe0o|                                                 |\r\n|  | - Gi\u1ea3i quy\u1ebft symbol   | --\x3e |   memory t\u1ea1i runtime |                                                 |\r\n|  |   (printf, malloc)    |     | - N\u1ea1p shared library |                                                 |\r\n|  | - T\u1ea1o executable      |     |   (.so, .dll)        |                                                 |\r\n|  +----------------------+     +----------------------+                                                 |\r\n|                                                                                                         |\r\n|  Output: a.out (Linux), .exe (Windows)                                                                  |\r\n+---------------------------------------------------------------------------------------------------------+\r\n                                          |\r\n                                          | (Execution)\r\n                                          v\r\n+---------------------------------------------------------------------------------------------------------+\r\n|                                         RUNTIME ENVIRONMENT                                           |\r\n|                                                                                                         |\r\n|  +---------------------+     +----------------------+     +----------------------+                    |\r\n|  |    Call Stack       |     |       Heap           |     |   Runtime System     |                    |\r\n|  | (Activation Records)|     | (malloc, new, GC)    |     | - Garbage Collector  |                    |\r\n|  |                     |     |                      |     | - JIT Compiler (V8)  |                    |\r\n|  | +---------------+   |     | +------------------+ |     | - Exception Handler  |                    |\r\n|  | | Return addr   |<--+-----+>| Objects          | |     | - Type System        |                    |\r\n|  | +---------------+   |     | | int x = 5;       | |     +----------------------+                    |\r\n|  | | Args: n=5     |   |     | | List lst;        | |                              |                    |\r\n|  | +---------------+   |     | +------------------+ |                              |                    |\r\n|  | | Local vars    |   |     |                      |                              |                    |\r\n|  | | (none)        |   |     |                      |                              |                    |\r\n|  | +---------------+   |     +----------------------+                              |                    |\r\n|  | | Saved RBP     |   |                                                           |                    |\r\n|  | +---------------+   |                                                           |                    |\r\n|  |        |            |                                                           |                    |\r\n|  |        v            |                                                           |                    |\r\n|  | +---------------+   |                                                           |                    |\r\n|  | | Previous frame|   |                                                           |                    |\r\n|  | +---------------+   |                                                           |                    |\r\n|  +---------------------+                                                           |                    |\r\n|                                                                                     |                    |\r\n|  \u2190 M\u1ed7i l\u1ea7n g\u1ecdi h\xe0m: t\u1ea1o frame m\u1edbi tr\xean stack \u2190 Tr\u1ea3 v\u1ec1: gi\u1ea3i ph\xf3ng frame            |                    |\r\n+-------------------------------------------------------------------------------------+--------------------+\r\n\r\n                                          |\r\n                                          | (Hardware Execution)\r\n                                          v\r\n+---------------------------------------------------------------------------------------------------------+\r\n|                                         CPU EXECUTION                                                   |\r\n|                                                                                                         |\r\n|  +----------------------+     +----------------------+     +-------------------------------+           |\r\n|  | Instruction Fetch    | --\x3e | Decode               | --\x3e | Execute (ALU, FPU, Branch)    |           |\r\n|  | (from .text section) |     | (opcode \u2192 micro-op)  |     |                               |           |\r\n|  +----------------------+     +----------------------+     +-------------------------------+           |\r\n|                                                                                                         |\r\n|  \u2192 K\u1ebft qu\u1ea3: ch\u01b0\u01a1ng tr\xecnh ch\u1ea1y, in ra: factorial(5) = 120                                              |\r\n+---------------------------------------------------------------------------------------------------------+\r\n\r\n                                                                 ^\r\n                                                                 | (JIT Compilation \u2013 Alternative Path)\r\n                                                                 |\r\n+------------------------------------------------------------------------------------------------------------------+\r\n|                                          JUST-IN-TIME (JIT) COMPILATION                                        |\r\n|                                                                                                                  |\r\n|   Source (JavaScript) \u2192 AST \u2192 Bytecode (V8) \u2192 Hot Code Detected \u2192 Compile to Machine Code \u2192 Cache                |\r\n|                                                                                                                  |\r\n|   V\xed d\u1ee5: V8 (Chrome), HotSpot (Java), .NET CLR                                                                   |\r\n|   \u2705 \u01afu \u0111i\u1ec3m: t\u1ed1i \u01b0u theo h\xe0nh vi th\u1ef1c t\u1ebf                                                                          |\r\n|   \u274c Nh\u01b0\u1ee3c \u0111i\u1ec3m: th\u1eddi gian kh\u1edfi \u0111\u1ed9ng, t\u1ed1n CPU l\xfac ch\u1ea1y                                                           |\r\n+------------------------------------------------------------------------------------------------------------------+\n'})}),"\n",(0,r.jsx)(e.p,{children:"GHI CH\xda:"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Frontend"}),": Ng\xf4n ng\u1eef c\u1ee5 th\u1ec3 (C, Python) \u2192 IR"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Backend"}),": Ki\u1ebfn tr\xfac c\u1ee5 th\u1ec3 (x86, ARM) \u2190 IR"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"IR (Intermediate Representation)"}),": C\u1ea7u n\u1ed1i gi\u1eefa frontend v\xe0 backend"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Symbol Table"}),": L\u01b0u th\xf4ng tin bi\u1ebfn, h\xe0m, ki\u1ec3u, scope \u2013 d\xf9ng xuy\xean su\u1ed1t"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Register Allocation"}),": D\xf9ng Graph Coloring ho\u1eb7c Linear Scan"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Optimization"}),": C\xe0ng mu\u1ed9n \u2192 c\xe0ng hi\u1ec7u qu\u1ea3 (nh\u01b0ng ph\u1ea3i \u0111\xfang)"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"GC"}),": Ch\u1ec9 c\xf3 trong ng\xf4n ng\u1eef qu\u1ea3n l\xfd b\u1ed9 nh\u1edb t\u1ef1 \u0111\u1ed9ng (Java, Go, Python)"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Static vs Dynamic Linking"}),": .a vs .so (Linux), .lib vs .dll (Windows)"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Activation Record"}),": Frame tr\xean stack khi g\u1ecdi h\xe0m"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"LLVM"}),": Framework compiler hi\u1ec7n \u0111\u1ea1i \u2013 frontend (Clang) + backend (LLVM IR \u2192 x86/ARM)"]}),"\n"]}),"\n",(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.code,{children:"Source \u2192 Lexer \u2192 Parser \u2192 AST \u2192 Semantic \u2192 IR \u2192 Optimize \u2192 Code Gen \u2192 Object \u2192 Link \u2192 Executable \u2192 Run"})}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"1-compiler",children:"1. COMPILER"}),"\n",(0,r.jsx)(e.h3,{id:"11-introduction-to-compilers",children:"1.1. Introduction to Compilers"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:["Definition:",(0,r.jsx)(e.br,{}),"\n","Ch\u01b0\u01a1ng tr\xecnh chuy\u1ec3n \u0111\u1ed5i m\xe3 ngu\u1ed3n (source code) vi\u1ebft b\u1eb1ng ng\xf4n ng\u1eef c\u1ea5p cao (C++, Java, Rust\u2026)",(0,r.jsx)(e.br,{}),"\n","th\xe0nh m\xe3 m\xe1y (machine code) ho\u1eb7c m\xe3 trung gian (intermediate code)."]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsx)(e.p,{children:"Ph\xe2n bi\u1ec7t v\u1edbi Interpreter:"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Compiler"}),": d\u1ecbch to\xe0n b\u1ed9 \u2192 m\xe3 m\xe1y \u2192 ch\u1ea1y nhanh."]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Interpreter"}),": \u0111\u1ecdc v\xe0 th\u1ef1c thi t\u1eebng d\xf2ng \u2192 ch\u1eadm h\u01a1n, nh\u01b0ng debug d\u1ec5."]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Just-In-Time (JIT)"}),": k\u1ebft h\u1ee3p c\u1ea3 hai (v\xed d\u1ee5: Java JVM, V8 JavaScript engine)."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsx)(e.p,{children:"C\xe1c giai \u0111o\u1ea1n c\u1ee7a Compiler:"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Frontend"}),": Ph\xe2n t\xedch m\xe3 ngu\u1ed3n."]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Middle-end"}),": T\u1ed1i \u01b0u h\xf3a."]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Backend"}),": Sinh m\xe3 m\u1ee5c ti\xeau."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsx)(e.p,{children:"M\u1ee5c ti\xeau c\u1ee7a Compiler:"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Ch\xednh x\xe1c (correctness)"}),"\n",(0,r.jsx)(e.li,{children:"Hi\u1ec7u su\u1ea5t (fast execution, low memory)"}),"\n",(0,r.jsx)(e.li,{children:"B\xe1o l\u1ed7i r\xf5 r\xe0ng"}),"\n",(0,r.jsx)(e.li,{children:"T\u1ed1i \u01b0u h\xf3a t\u1ed1t"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"12-compiler-phases-c\xe1c-giai-\u0111o\u1ea1n",children:"1.2. Compiler Phases (C\xe1c giai \u0111o\u1ea1n)"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Lexical Analysis (Scanner)"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Input: Chu\u1ed7i k\xfd t\u1ef1 (source code)"}),"\n",(0,r.jsxs)(e.li,{children:["Output: Chu\u1ed7i ",(0,r.jsx)(e.strong,{children:"token"})," (identifier, keyword, operator, literal)"]}),"\n",(0,r.jsxs)(e.li,{children:["C\xf4ng c\u1ee5: ",(0,r.jsx)(e.strong,{children:"Regular expressions"}),", ",(0,r.jsx)(e.strong,{children:"Finite Automata"})]}),"\n",(0,r.jsxs)(e.li,{children:["V\xed d\u1ee5: ",(0,r.jsx)(e.code,{children:"int x = 5;"})," \u2192 ",(0,r.jsx)(e.code,{children:"int"}),", ",(0,r.jsx)(e.code,{children:"x"}),", ",(0,r.jsx)(e.code,{children:"="}),", ",(0,r.jsx)(e.code,{children:"5"}),", ",(0,r.jsx)(e.code,{children:";"})]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Syntax Analysis (Parser)"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Input: Tokens"}),"\n",(0,r.jsxs)(e.li,{children:["Output: ",(0,r.jsx)(e.strong,{children:"C\xe2y c\xfa ph\xe1p (Parse Tree / AST)"})]}),"\n",(0,r.jsxs)(e.li,{children:["C\xf4ng c\u1ee5: ",(0,r.jsx)(e.strong,{children:"Context-Free Grammar (CFG)"}),", ",(0,r.jsx)(e.strong,{children:"Parsers (LL, LR, LALR)"})]}),"\n",(0,r.jsxs)(e.li,{children:["Ph\xe1t hi\u1ec7n l\u1ed7i c\xfa ph\xe1p: ",(0,r.jsx)(e.code,{children:"x == 5 )"})," \u2192 missing ",(0,r.jsx)(e.code,{children:"("})]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Semantic Analysis"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Ki\u1ec3m tra ng\u1eef ngh\u0129a: ki\u1ec3u d\u1eef li\u1ec7u, khai b\xe1o bi\u1ebfn, scope"}),"\n",(0,r.jsxs)(e.li,{children:["X\xe2y d\u1ef1ng ",(0,r.jsx)(e.strong,{children:"Symbol Table"})," (l\u01b0u t\xean bi\u1ebfn, ki\u1ec3u, scope, \u0111\u1ecba ch\u1ec9)"]}),"\n",(0,r.jsxs)(e.li,{children:["Ki\u1ec3m tra:","\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Type checking (int + string?)"}),"\n",(0,r.jsx)(e.li,{children:"Undeclared variables"}),"\n",(0,r.jsx)(e.li,{children:"Function signature mismatch"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Intermediate Code Generation"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["T\u1ea1o m\xe3 trung gian:","\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Three-Address Code (TAC)"}),": ",(0,r.jsx)(e.code,{children:"t1 = a + b"})]}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.strong,{children:"Abstract Syntax Tree (AST)"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.strong,{children:"Control Flow Graph (CFG)"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(e.li,{children:"\u0110\u1ed9c l\u1eadp v\u1edbi ki\u1ebfn tr\xfac m\xe1y \u2192 d\u1ec5 t\u1ed1i \u01b0u v\xe0 porting"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Optimization"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"M\u1ee5c ti\xeau: T\u0103ng t\u1ed1c \u0111\u1ed9, gi\u1ea3m b\u1ed9 nh\u1edb, gi\u1ea3m n\u0103ng l\u01b0\u1ee3ng"}),"\n",(0,r.jsxs)(e.li,{children:["Lo\u1ea1i:","\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Local (trong m\u1ed9t basic block)"}),"\n",(0,r.jsx)(e.li,{children:"Global (to\xe0n h\xe0m, d\xf9ng CFG)"}),"\n",(0,r.jsx)(e.li,{children:"Loop optimization"}),"\n",(0,r.jsx)(e.li,{children:"Inter-procedural (gi\u1eefa c\xe1c h\xe0m)"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["K\u1ef9 thu\u1eadt:","\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["Constant Folding: ",(0,r.jsx)(e.code,{children:"x = 2 + 3"})," \u2192 ",(0,r.jsx)(e.code,{children:"x = 5"})]}),"\n",(0,r.jsx)(e.li,{children:"Dead Code Elimination"}),"\n",(0,r.jsx)(e.li,{children:"Common Subexpression Elimination"}),"\n",(0,r.jsx)(e.li,{children:"Loop Invariant Code Motion"}),"\n",(0,r.jsxs)(e.li,{children:["Strength Reduction (e.g., ",(0,r.jsx)(e.code,{children:"x*2"})," \u2192 ",(0,r.jsx)(e.code,{children:"x<<1"}),")"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Code Generation"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Chuy\u1ec3n m\xe3 trung gian \u2192 m\xe3 m\xe1y (assembly ho\u1eb7c object code)"}),"\n",(0,r.jsx)(e.li,{children:"G\xe1n bi\u1ebfn v\xe0o thanh ghi (Register Allocation)"}),"\n",(0,r.jsx)(e.li,{children:"Instruction Selection: ch\u1ecdn l\u1ec7nh m\xe1y ph\xf9 h\u1ee3p"}),"\n",(0,r.jsx)(e.li,{children:"Instruction Scheduling: t\u1ed1i \u01b0u th\u1ee9 t\u1ef1 l\u1ec7nh \u0111\u1ec3 pipeline hi\u1ec7u qu\u1ea3"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Symbol Table Management"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"\u0110\u01b0\u1ee3c d\xf9ng xuy\xean su\u1ed1t c\xe1c giai \u0111o\u1ea1n"}),"\n",(0,r.jsx)(e.li,{children:"L\u01b0u: t\xean, ki\u1ec3u, scope, k\xedch th\u01b0\u1edbc, \u0111\u1ecba ch\u1ec9, thu\u1ed9c t\xednh"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Error Handling"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Ph\xe1t hi\u1ec7n v\xe0 b\xe1o l\u1ed7i \u1edf m\u1ecdi giai \u0111o\u1ea1n"}),"\n",(0,r.jsx)(e.li,{children:"Recovery: ti\u1ebfp t\u1ee5c ph\xe2n t\xedch sau l\u1ed7i (\u0111\u1ec3 ph\xe1t hi\u1ec7n nhi\u1ec1u l\u1ed7i)"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"13-runtime-environment",children:"1.3. Runtime Environment"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["Activation Record (Stack Frame):","\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["L\u01b0u th\xf4ng tin khi h\xe0m \u0111\u01b0\u1ee3c g\u1ecdi:","\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Return address"}),"\n",(0,r.jsx)(e.li,{children:"Parameters"}),"\n",(0,r.jsx)(e.li,{children:"Local variables"}),"\n",(0,r.jsx)(e.li,{children:"Temporary storage"}),"\n",(0,r.jsx)(e.li,{children:"Previous frame pointer"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["Stack vs Heap Allocation:","\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Stack: bi\u1ebfn c\u1ee5c b\u1ed9, nhanh, t\u1ef1 \u0111\u1ed9ng gi\u1ea3i ph\xf3ng"}),"\n",(0,r.jsxs)(e.li,{children:["Heap: ",(0,r.jsx)(e.code,{children:"malloc"}),", ",(0,r.jsx)(e.code,{children:"new"})," \u2013 qu\u1ea3n l\xfd th\u1ee7 c\xf4ng ho\u1eb7c GC"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["Parameter Passing:","\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Call by Value"}),"\n",(0,r.jsx)(e.li,{children:"Call by Reference"}),"\n",(0,r.jsx)(e.li,{children:"Call by Name (rare)"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"14-parsing-techniques",children:"1.4. Parsing Techniques"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Top-down Parsing"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"B\u1eaft \u0111\u1ea7u t\u1eeb g\u1ed1c c\xe2y c\xfa ph\xe1p"}),"\n",(0,r.jsx)(e.li,{children:"LL(1): Left-to-right, Leftmost derivation, 1 token lookahead"}),"\n",(0,r.jsx)(e.li,{children:"D\u1ec5 tri\u1ec3n khai b\u1eb1ng \u0111\u1ec7 quy (Recursive Descent)"}),"\n",(0,r.jsx)(e.li,{children:"Y\xeau c\u1ea7u: kh\xf4ng left recursion, kh\xf4ng ambiguity"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Bottom-up Parsing"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"B\u1eaft \u0111\u1ea7u t\u1eeb l\xe1 \u2192 x\xe2y c\xe2y l\xean"}),"\n",(0,r.jsx)(e.li,{children:"LR(1), LALR(1): m\u1ea1nh h\u01a1n LL, h\u1ed7 tr\u1ee3 nhi\u1ec1u ng\u1eef ph\xe1p"}),"\n",(0,r.jsx)(e.li,{children:"D\xf9ng b\u1ea3ng parsing (action, goto)"}),"\n",(0,r.jsxs)(e.li,{children:["C\xf4ng c\u1ee5: ",(0,r.jsx)(e.strong,{children:"Yacc, Bison, ANTLR"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"15-code-optimization-techniques",children:"1.5. Code Optimization Techniques"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Local Optimizations"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Constant Folding, Constant Propagation"}),"\n",(0,r.jsx)(e.li,{children:"Copy Propagation"}),"\n",(0,r.jsx)(e.li,{children:"Dead Code Elimination"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Global Optimizations"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Available Expressions"}),"\n",(0,r.jsx)(e.li,{children:"Live Variable Analysis"}),"\n",(0,r.jsx)(e.li,{children:"Reaching Definitions"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Loop Optimizations"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Loop Invariant Code Motion"}),"\n",(0,r.jsx)(e.li,{children:"Induction Variable Elimination"}),"\n",(0,r.jsx)(e.li,{children:"Loop Unrolling (gi\u1ea3m overhead)"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Inter-procedural Optimization (IPO)"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Inline expansion (function inlining)"}),"\n",(0,r.jsx)(e.li,{children:"Devirtualization"}),"\n",(0,r.jsx)(e.li,{children:"Whole-program optimization"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"16-register-allocation",children:"1.6. Register Allocation"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"M\u1ee5c ti\xeau: G\xe1n bi\u1ebfn v\xe0o thanh ghi (nhanh h\u01a1n b\u1ed9 nh\u1edb)"}),"\n",(0,r.jsxs)(e.li,{children:["V\u1ea5n \u0111\u1ec1: S\u1ed1 thanh ghi h\u1eefu h\u1ea1n \u2192 c\u1ea7n ",(0,r.jsx)(e.strong,{children:"spill"})," (\u0111\u01b0a bi\u1ebfn ra memory)"]}),"\n",(0,r.jsxs)(e.li,{children:["Ph\u01b0\u01a1ng ph\xe1p:","\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Graph Coloring"}),":","\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["X\xe2y d\u1ef1ng ",(0,r.jsx)(e.strong,{children:"interference graph"})," (bi\u1ebfn A v\xe0 B kh\xf4ng th\u1ec3 d\xf9ng chung thanh ghi)"]}),"\n",(0,r.jsx)(e.li,{children:"T\xf4 m\xe0u \u0111\u1ed3 th\u1ecb \u2192 m\u1ed7i m\xe0u l\xe0 m\u1ed9t thanh ghi"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Linear Scan"})," (d\xf9ng trong JIT)"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"17-garbage-collection-gc",children:"1.7. Garbage Collection (GC)"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"D\xf9ng trong ng\xf4n ng\u1eef c\xf3 qu\u1ea3n l\xfd b\u1ed9 nh\u1edb t\u1ef1 \u0111\u1ed9ng (Java, Python, Go)"}),"\n",(0,r.jsx)(e.li,{children:"M\u1ee5c ti\xeau: T\u1ef1 \u0111\u1ed9ng gi\u1ea3i ph\xf3ng b\u1ed9 nh\u1edb kh\xf4ng d\xf9ng"}),"\n",(0,r.jsxs)(e.li,{children:["C\xe1c lo\u1ea1i:","\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Mark & Sweep"}),": \u0111\xe1nh d\u1ea5u + d\u1ecdn d\u1eb9p"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Stop-and-Copy"}),": sao ch\xe9p v\xf9ng s\u1ed1ng sang n\u01a1i kh\xe1c"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Generational GC"}),": chia heap theo tu\u1ed5i (tr\u1ebb/d\u1ec5 ch\u1ebft)"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Reference Counting"}),": \u0111\u01a1n gi\u1ea3n, nh\u01b0ng kh\xf4ng x\u1eed l\xfd cyclic reference"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"18-compiler-frontend--backend",children:"1.8. Compiler Frontend & Backend"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Frontend"}),":"]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Ng\xf4n ng\u1eef c\u1ee5 th\u1ec3 (C++, Python)"}),"\n",(0,r.jsx)(e.li,{children:"Lexical, syntax, semantic analysis"}),"\n",(0,r.jsx)(e.li,{children:"Output: Intermediate Representation (IR)"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Backend"}),":"]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Ki\u1ebfn tr\xfac c\u1ee5 th\u1ec3 (x86, ARM, RISC-V)"}),"\n",(0,r.jsx)(e.li,{children:"Code generation, register allocation, optimization"}),"\n",(0,r.jsx)(e.li,{children:"Output: Machine code"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"IR (Intermediate Representation)"}),":"]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"\u0110\u1ed9c l\u1eadp ng\xf4n ng\u1eef v\xe0 ki\u1ebfn tr\xfac"}),"\n",(0,r.jsx)(e.li,{children:"V\xed d\u1ee5: LLVM IR, Java bytecode, Three-Address Code"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"19-tools--frameworks",children:"1.9. Tools & Frameworks"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Lex/Flex"}),": T\u1ea1o lexer t\u1eeb regex"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Yacc/Bison"}),": T\u1ea1o parser t\u1eeb CFG"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"ANTLR"}),": Parser generator m\u1ea1nh, h\u1ed7 tr\u1ee3 nhi\u1ec1u ng\xf4n ng\u1eef"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"LLVM"}),": Framework compiler hi\u1ec7n \u0111\u1ea1i (d\xf9ng b\u1edfi Clang, Swift, Rust)","\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"IR m\u1ea1nh, t\u1ed1i \u01b0u h\xf3a t\u1ed1t, h\u1ed7 tr\u1ee3 \u0111a n\u1ec1n t\u1ea3ng"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"GCC (GNU Compiler Collection)"}),": H\u1ed7 tr\u1ee3 nhi\u1ec1u ng\xf4n ng\u1eef (C, C++, Fortran\u2026)"]}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"110-just-in-time-jit-compilation",children:"1.10. Just-In-Time (JIT) Compilation"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"D\u1ecbch t\u1ea1i th\u1eddi \u0111i\u1ec3m ch\u1ea1y (runtime)"}),"\n",(0,r.jsxs)(e.li,{children:["D\xf9ng trong:","\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Java (JVM + HotSpot)"}),"\n",(0,r.jsx)(e.li,{children:"JavaScript (V8 engine)"}),"\n",(0,r.jsx)(e.li,{children:".NET (CLR)"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\u01afu \u0111i\u1ec3m:","\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"T\u1ed1i \u01b0u h\xf3a d\u1ef1a tr\xean h\xe0nh vi th\u1ef1c t\u1ebf (profile-guided)"}),"\n",(0,r.jsx)(e.li,{children:"Linh ho\u1ea1t, hi\u1ec7u su\u1ea5t cao h\u01a1n interpreter"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["Nh\u01b0\u1ee3c \u0111i\u1ec3m:","\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Th\u1eddi gian kh\u1edfi \u0111\u1ed9ng l\xe2u h\u01a1n"}),"\n",(0,r.jsx)(e.li,{children:"T\u1ed1n CPU \u0111\u1ec3 bi\xean d\u1ecbch l\xfac ch\u1ea1y"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsxs)(e.admonition,{title:"Compiler",type:"note",children:[(0,r.jsxs)(e.p,{children:["A compiler is a sophisticated program that translates high-level source code into executable machine code.",(0,r.jsx)(e.br,{}),"\n","It bridges the gap between human-readable programs and hardware execution."]}),(0,r.jsx)(e.p,{children:"Key components:"}),(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Frontend"}),": Analyzes syntax and semantics."]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Intermediate Representation (IR)"}),": Language- and machine-agnostic form."]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Optimizer"}),": Improves code efficiency."]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Backend"}),": Generates target-specific machine code."]}),"\n"]}),(0,r.jsx)(e.p,{children:"Modern compilers emphasize:"}),(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Correctness"})," and ",(0,r.jsx)(e.strong,{children:"portability"}),"."]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Aggressive optimization"})," for performance."]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Rich error reporting"})," for developer experience."]}),"\n"]}),(0,r.jsx)(e.p,{children:"Understanding compilers helps in writing efficient code, debugging low-level issues, and designing programming languages."})]}),"\n",(0,r.jsx)(e.h2,{id:"formulas",children:"Formulas"}),"\n",(0,r.jsx)(e.h2,{id:"compiler",children:"COMPILER\r\n|"}),"\n",(0,r.jsx)(e.p,{children:"|                        |                              |\r\nFRONTEND (Analysis)     OPTIMIZATION               BACKEND (Code Gen)\r\n|                        |                              |"}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsx)(e.p,{children:"|      |      |       |        |        |         |         |         |\r\nLexer  Parser  Semantic  Constant  Dead Code  Loop     Register  Instruction  Target\r\n(AST)   Analysis  Folding   Elimination  Unrolling  Allocation  Scheduling  Code"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Speedup from Optimization"})}),"\n",(0,r.jsx)(e.span,{className:"katex-display",children:(0,r.jsxs)(e.span,{className:"katex",children:[(0,r.jsx)(e.span,{className:"katex-mathml",children:(0,r.jsx)(e.math,{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block",children:(0,r.jsxs)(e.semantics,{children:[(0,r.jsxs)(e.mrow,{children:[(0,r.jsx)(e.mtext,{children:"Speedup"}),(0,r.jsx)(e.mo,{children:"="}),(0,r.jsxs)(e.mfrac,{children:[(0,r.jsxs)(e.msub,{children:[(0,r.jsx)(e.mi,{children:"T"}),(0,r.jsx)(e.mtext,{children:"before"})]}),(0,r.jsxs)(e.msub,{children:[(0,r.jsx)(e.mi,{children:"T"}),(0,r.jsx)(e.mtext,{children:"after"})]})]})]}),(0,r.jsx)(e.annotation,{encoding:"application/x-tex",children:"\\text{Speedup} = \\frac{T_{\\text{before}}}{T_{\\text{after}}}"})]})})}),(0,r.jsxs)(e.span,{className:"katex-html","aria-hidden":"true",children:[(0,r.jsxs)(e.span,{className:"base",children:[(0,r.jsx)(e.span,{className:"strut",style:{height:"0.8889em",verticalAlign:"-0.1944em"}}),(0,r.jsx)(e.span,{className:"mord text",children:(0,r.jsx)(e.span,{className:"mord",children:"Speedup"})}),(0,r.jsx)(e.span,{className:"mspace",style:{marginRight:"0.2778em"}}),(0,r.jsx)(e.span,{className:"mrel",children:"="}),(0,r.jsx)(e.span,{className:"mspace",style:{marginRight:"0.2778em"}})]}),(0,r.jsxs)(e.span,{className:"base",children:[(0,r.jsx)(e.span,{className:"strut",style:{height:"2.1963em",verticalAlign:"-0.836em"}}),(0,r.jsxs)(e.span,{className:"mord",children:[(0,r.jsx)(e.span,{className:"mopen nulldelimiter"}),(0,r.jsx)(e.span,{className:"mfrac",children:(0,r.jsxs)(e.span,{className:"vlist-t vlist-t2",children:[(0,r.jsxs)(e.span,{className:"vlist-r",children:[(0,r.jsxs)(e.span,{className:"vlist",style:{height:"1.3603em"},children:[(0,r.jsxs)(e.span,{style:{top:"-2.314em"},children:[(0,r.jsx)(e.span,{className:"pstrut",style:{height:"3em"}}),(0,r.jsx)(e.span,{className:"mord",children:(0,r.jsxs)(e.span,{className:"mord",children:[(0,r.jsx)(e.span,{className:"mord mathnormal",style:{marginRight:"0.13889em"},children:"T"}),(0,r.jsx)(e.span,{className:"msupsub",children:(0,r.jsxs)(e.span,{className:"vlist-t vlist-t2",children:[(0,r.jsxs)(e.span,{className:"vlist-r",children:[(0,r.jsx)(e.span,{className:"vlist",style:{height:"0.3361em"},children:(0,r.jsxs)(e.span,{style:{top:"-2.55em",marginLeft:"-0.1389em",marginRight:"0.05em"},children:[(0,r.jsx)(e.span,{className:"pstrut",style:{height:"2.7em"}}),(0,r.jsx)(e.span,{className:"sizing reset-size6 size3 mtight",children:(0,r.jsx)(e.span,{className:"mord mtight",children:(0,r.jsx)(e.span,{className:"mord text mtight",children:(0,r.jsx)(e.span,{className:"mord mtight",children:"after"})})})})]})}),(0,r.jsx)(e.span,{className:"vlist-s",children:"\u200b"})]}),(0,r.jsx)(e.span,{className:"vlist-r",children:(0,r.jsx)(e.span,{className:"vlist",style:{height:"0.15em"},children:(0,r.jsx)(e.span,{})})})]})})]})})]}),(0,r.jsxs)(e.span,{style:{top:"-3.23em"},children:[(0,r.jsx)(e.span,{className:"pstrut",style:{height:"3em"}}),(0,r.jsx)(e.span,{className:"frac-line",style:{borderBottomWidth:"0.04em"}})]}),(0,r.jsxs)(e.span,{style:{top:"-3.677em"},children:[(0,r.jsx)(e.span,{className:"pstrut",style:{height:"3em"}}),(0,r.jsx)(e.span,{className:"mord",children:(0,r.jsxs)(e.span,{className:"mord",children:[(0,r.jsx)(e.span,{className:"mord mathnormal",style:{marginRight:"0.13889em"},children:"T"}),(0,r.jsx)(e.span,{className:"msupsub",children:(0,r.jsxs)(e.span,{className:"vlist-t vlist-t2",children:[(0,r.jsxs)(e.span,{className:"vlist-r",children:[(0,r.jsx)(e.span,{className:"vlist",style:{height:"0.3361em"},children:(0,r.jsxs)(e.span,{style:{top:"-2.55em",marginLeft:"-0.1389em",marginRight:"0.05em"},children:[(0,r.jsx)(e.span,{className:"pstrut",style:{height:"2.7em"}}),(0,r.jsx)(e.span,{className:"sizing reset-size6 size3 mtight",children:(0,r.jsx)(e.span,{className:"mord mtight",children:(0,r.jsx)(e.span,{className:"mord text mtight",children:(0,r.jsx)(e.span,{className:"mord mtight",children:"before"})})})})]})}),(0,r.jsx)(e.span,{className:"vlist-s",children:"\u200b"})]}),(0,r.jsx)(e.span,{className:"vlist-r",children:(0,r.jsx)(e.span,{className:"vlist",style:{height:"0.15em"},children:(0,r.jsx)(e.span,{})})})]})})]})})]})]}),(0,r.jsx)(e.span,{className:"vlist-s",children:"\u200b"})]}),(0,r.jsx)(e.span,{className:"vlist-r",children:(0,r.jsx)(e.span,{className:"vlist",style:{height:"0.836em"},children:(0,r.jsx)(e.span,{})})})]})}),(0,r.jsx)(e.span,{className:"mclose nulldelimiter"})]})]})]})]})}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Register Pressure"})}),"\n",(0,r.jsx)(e.span,{className:"katex-display",children:(0,r.jsxs)(e.span,{className:"katex",children:[(0,r.jsx)(e.span,{className:"katex-mathml",children:(0,r.jsx)(e.math,{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block",children:(0,r.jsxs)(e.semantics,{children:[(0,r.jsxs)(e.mrow,{children:[(0,r.jsx)(e.mtext,{children:"Pressure"}),(0,r.jsx)(e.mo,{children:"="}),(0,r.jsxs)(e.mfrac,{children:[(0,r.jsx)(e.mtext,{children:"Number\xa0of\xa0live\xa0variables"}),(0,r.jsx)(e.mtext,{children:"Available\xa0registers"})]})]}),(0,r.jsx)(e.annotation,{encoding:"application/x-tex",children:"\\text{Pressure} = \\frac{\\text{Number of live variables}}{\\text{Available registers}}"})]})})}),(0,r.jsxs)(e.span,{className:"katex-html","aria-hidden":"true",children:[(0,r.jsxs)(e.span,{className:"base",children:[(0,r.jsx)(e.span,{className:"strut",style:{height:"0.6833em"}}),(0,r.jsx)(e.span,{className:"mord text",children:(0,r.jsx)(e.span,{className:"mord",children:"Pressure"})}),(0,r.jsx)(e.span,{className:"mspace",style:{marginRight:"0.2778em"}}),(0,r.jsx)(e.span,{className:"mrel",children:"="}),(0,r.jsx)(e.span,{className:"mspace",style:{marginRight:"0.2778em"}})]}),(0,r.jsxs)(e.span,{className:"base",children:[(0,r.jsx)(e.span,{className:"strut",style:{height:"2.2519em",verticalAlign:"-0.8804em"}}),(0,r.jsxs)(e.span,{className:"mord",children:[(0,r.jsx)(e.span,{className:"mopen nulldelimiter"}),(0,r.jsx)(e.span,{className:"mfrac",children:(0,r.jsxs)(e.span,{className:"vlist-t vlist-t2",children:[(0,r.jsxs)(e.span,{className:"vlist-r",children:[(0,r.jsxs)(e.span,{className:"vlist",style:{height:"1.3714em"},children:[(0,r.jsxs)(e.span,{style:{top:"-2.314em"},children:[(0,r.jsx)(e.span,{className:"pstrut",style:{height:"3em"}}),(0,r.jsx)(e.span,{className:"mord",children:(0,r.jsx)(e.span,{className:"mord text",children:(0,r.jsx)(e.span,{className:"mord",children:"Available\xa0registers"})})})]}),(0,r.jsxs)(e.span,{style:{top:"-3.23em"},children:[(0,r.jsx)(e.span,{className:"pstrut",style:{height:"3em"}}),(0,r.jsx)(e.span,{className:"frac-line",style:{borderBottomWidth:"0.04em"}})]}),(0,r.jsxs)(e.span,{style:{top:"-3.677em"},children:[(0,r.jsx)(e.span,{className:"pstrut",style:{height:"3em"}}),(0,r.jsx)(e.span,{className:"mord",children:(0,r.jsx)(e.span,{className:"mord text",children:(0,r.jsx)(e.span,{className:"mord",children:"Number\xa0of\xa0live\xa0variables"})})})]})]}),(0,r.jsx)(e.span,{className:"vlist-s",children:"\u200b"})]}),(0,r.jsx)(e.span,{className:"vlist-r",children:(0,r.jsx)(e.span,{className:"vlist",style:{height:"0.8804em"},children:(0,r.jsx)(e.span,{})})})]})}),(0,r.jsx)(e.span,{className:"mclose nulldelimiter"})]})]})]})]})}),"\n",(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsx)(e.p,{children:"1 \u2192 c\u1ea7n spill"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Available Expressions"}),(0,r.jsx)(e.br,{}),"\n","M\u1ed9t bi\u1ec3u th\u1ee9c ",(0,r.jsx)(e.code,{children:"a + b"}),' l\xe0 "available" t\u1ea1i \u0111i\u1ec3m P n\u1ebfu:']}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"\u0110\u01b0\u1ee3c t\xednh tr\u01b0\u1edbc P"}),"\n",(0,r.jsx)(e.li,{children:"Kh\xf4ng thay \u0111\u1ed5i gi\u1eefa \u0111\xf3 v\xe0 P"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Live Variable"}),(0,r.jsx)(e.br,{}),"\n","Bi\u1ebfn ",(0,r.jsx)(e.code,{children:"x"}),' l\xe0 "live" t\u1ea1i \u0111i\u1ec3m P n\u1ebfu:']}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"S\u1ebd \u0111\u01b0\u1ee3c d\xf9ng sau P"}),"\n",(0,r.jsx)(e.li,{children:"V\xe0 ch\u01b0a \u0111\u01b0\u1ee3c g\xe1n l\u1ea1i"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Loop Invariant Cost"}),(0,r.jsx)(e.br,{}),"\n","N\u1ebfu bi\u1ec3u th\u1ee9c trong v\xf2ng l\u1eb7p kh\xf4ng \u0111\u1ed5i \u2192 di chuy\u1ec3n ra ngo\xe0i:"]}),"\n",(0,r.jsx)(e.span,{className:"katex-display",children:(0,r.jsxs)(e.span,{className:"katex",children:[(0,r.jsx)(e.span,{className:"katex-mathml",children:(0,r.jsx)(e.math,{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block",children:(0,r.jsxs)(e.semantics,{children:[(0,r.jsxs)(e.mrow,{children:[(0,r.jsx)(e.mtext,{children:"Savings"}),(0,r.jsx)(e.mo,{children:"="}),(0,r.jsx)(e.mo,{stretchy:"false",children:"("}),(0,r.jsx)(e.mtext,{children:"Iterations"}),(0,r.jsx)(e.mo,{children:"\u2212"}),(0,r.jsx)(e.mn,{children:"1"}),(0,r.jsx)(e.mo,{stretchy:"false",children:")"}),(0,r.jsx)(e.mo,{children:"\xd7"}),(0,r.jsx)(e.mtext,{children:"Cost\xa0per\xa0evaluation"})]}),(0,r.jsx)(e.annotation,{encoding:"application/x-tex",children:"\\text{Savings} = (\\text{Iterations} - 1) \\times \\text{Cost per evaluation}"})]})})}),(0,r.jsxs)(e.span,{className:"katex-html","aria-hidden":"true",children:[(0,r.jsxs)(e.span,{className:"base",children:[(0,r.jsx)(e.span,{className:"strut",style:{height:"0.8778em",verticalAlign:"-0.1944em"}}),(0,r.jsx)(e.span,{className:"mord text",children:(0,r.jsx)(e.span,{className:"mord",children:"Savings"})}),(0,r.jsx)(e.span,{className:"mspace",style:{marginRight:"0.2778em"}}),(0,r.jsx)(e.span,{className:"mrel",children:"="}),(0,r.jsx)(e.span,{className:"mspace",style:{marginRight:"0.2778em"}})]}),(0,r.jsxs)(e.span,{className:"base",children:[(0,r.jsx)(e.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.jsx)(e.span,{className:"mopen",children:"("}),(0,r.jsx)(e.span,{className:"mord text",children:(0,r.jsx)(e.span,{className:"mord",children:"Iterations"})}),(0,r.jsx)(e.span,{className:"mspace",style:{marginRight:"0.2222em"}}),(0,r.jsx)(e.span,{className:"mbin",children:"\u2212"}),(0,r.jsx)(e.span,{className:"mspace",style:{marginRight:"0.2222em"}})]}),(0,r.jsxs)(e.span,{className:"base",children:[(0,r.jsx)(e.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.jsx)(e.span,{className:"mord",children:"1"}),(0,r.jsx)(e.span,{className:"mclose",children:")"}),(0,r.jsx)(e.span,{className:"mspace",style:{marginRight:"0.2222em"}}),(0,r.jsx)(e.span,{className:"mbin",children:"\xd7"}),(0,r.jsx)(e.span,{className:"mspace",style:{marginRight:"0.2222em"}})]}),(0,r.jsxs)(e.span,{className:"base",children:[(0,r.jsx)(e.span,{className:"strut",style:{height:"0.8889em",verticalAlign:"-0.1944em"}}),(0,r.jsx)(e.span,{className:"mord text",children:(0,r.jsx)(e.span,{className:"mord",children:"Cost\xa0per\xa0evaluation"})})]})]})]})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsx)(e.h2,{id:"rules-of-thumb",children:"Rules of Thumb"}),"\n",(0,r.jsx)(e.h3,{id:"the-9010-rule-optimization",children:"The 90/10 Rule (Optimization)"}),"\n",(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsx)(e.p,{children:"90% of execution time is spent in 10% of the code. Optimize hotspots."}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"premature-optimization-rule-donald-knuth",children:"Premature Optimization Rule (Donald Knuth)"}),"\n",(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsxs)(e.p,{children:['"Premature optimization is the root of all evil."',(0,r.jsx)(e.br,{}),"\n","\u2192 T\u1ed1i \u01b0u h\xf3a ch\u1ec9 khi c\u1ea7n, sau khi \u0111o hi\u1ec7u su\u1ea5t."]}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"parse-table-size-rule",children:"Parse Table Size Rule"}),"\n",(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsx)(e.p,{children:"LR(1) tables l\u1edbn h\u01a1n LALR(1). D\xf9ng LALR ho\u1eb7c SLR n\u1ebfu \u0111\u1ee7."}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"register-allocation-rule",children:"Register Allocation Rule"}),"\n",(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsx)(e.p,{children:"N\u1ebfu s\u1ed1 bi\u1ebfn s\u1ed1ng > s\u1ed1 thanh ghi \u2192 ph\u1ea3i spill. Gi\u1ea3m bi\u1ebfn c\u1ee5c b\u1ed9."}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"three-address-code-rule",children:"Three-Address Code Rule"}),"\n",(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsxs)(e.p,{children:["M\u1ed7i l\u1ec7nh c\xf3 t\u1ed1i \u0111a 3 to\xe1n h\u1ea1ng: ",(0,r.jsx)(e.code,{children:"x = y op z"})]}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"ast-vs-parse-tree",children:"AST vs Parse Tree"}),"\n",(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsx)(e.p,{children:"AST lo\u1ea1i b\u1ecf token kh\xf4ng c\u1ea7n thi\u1ebft (d\u1ea5u ch\u1ea5m ph\u1ea9y, ngo\u1eb7c th\u1eeba)."}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"gc-pause-rule",children:"GC Pause Rule"}),"\n",(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsx)(e.p,{children:"Trong \u1ee9ng d\u1ee5ng real-time, tr\xe1nh GC l\u1edbn \u2192 d\xf9ng incremental ho\u1eb7c real-time GC."}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"llvm-rule",children:"LLVM Rule"}),"\n",(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsx)(e.p,{children:"N\u1ebfu b\u1ea1n vi\u1ebft ng\xf4n ng\u1eef m\u1edbi, h\xe3y d\xf9ng LLVM l\xe0m backend."}),"\n"]})]})}function o(n={}){const{wrapper:e}={...(0,l.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(d,{...n})}):d(n)}},8453:(n,e,s)=>{s.d(e,{R:()=>t,x:()=>c});var i=s(6540);const r={},l=i.createContext(r);function t(n){const e=i.useContext(l);return i.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function c(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:t(n.components),i.createElement(l.Provider,{value:e},n.children)}}}]);