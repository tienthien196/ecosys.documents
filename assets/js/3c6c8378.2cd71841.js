"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6974],{2643:(n,r,t)=>{t.r(r),t.d(r,{assets:()=>s,contentTitle:()=>c,default:()=>T,frontMatter:()=>o,metadata:()=>e,toc:()=>a});const e=JSON.parse('{"id":"Systems & Innovation/Systems/Interpreter/Interpreter","title":"Interpreter","description":"SO S\xc1NH TO\xc0N DI\u1ec6N: COMPILER vs INTERPRETER vs JIT \u2013 T\u1eea M\xc3 NGU\u1ed2N \u0110\u1ebeN TH\u1ef0C THI","source":"@site/docs/01_Systems & Innovation/Systems/Interpreter/Interpreter.md","sourceDirName":"01_Systems & Innovation/Systems/Interpreter","slug":"/Systems & Innovation/Systems/Interpreter/","permalink":"/ecosys.documents/docs/Systems & Innovation/Systems/Interpreter/","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"title":"Interpreter","sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"CompilerTest","permalink":"/ecosys.documents/docs/Systems & Innovation/Systems/Compiler/CompilerTest"},"next":{"title":"Operating Systems","permalink":"/ecosys.documents/docs/Systems & Innovation/Systems/Operating Systems/"}}');var i=t(4848),h=t(8453);const o={title:"Interpreter",sidebar_position:1},c=void 0,s={},a=[];function u(n){const r={code:"code",pre:"pre",...(0,h.R)(),...n.components};return(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{children:'==========================================================================================================\r\n        SO S\xc1NH TO\xc0N DI\u1ec6N: COMPILER vs INTERPRETER vs JIT \u2013 T\u1eea M\xc3 NGU\u1ed2N \u0110\u1ebeN TH\u1ef0C THI\r\n==========================================================================================================\r\n\r\n+---------------------------------------------------------------------------------------------------------+\r\n|                                         SOURCE CODE (Python, JavaScript, Java...)                     |\r\n|                                                                                                         |\r\n|   def factorial(n):                                                                                     |\r\n|       if n <= 1:                                                                                        |\r\n|           return 1                                                                                      |\r\n|       return n * factorial(n - 1)                                                                       |\r\n|                                                                                                         |\r\n+---------------------------------------------------------------------------------------------------------+\r\n                                          |\r\n          +-------------------------------+-------------------------------+\r\n          |                               |                               |\r\n          v                               v                               v\r\n+-------------------------+   +-------------------------+   +-------------------------+\r\n|       COMPILER          |   |      INTERPRETER        |   |         JIT             |\r\n| (C, Rust, Go - ahead-of-time)| (Python, early JS)     |   | (V8, JVM, .NET)         |\r\n+-------------------------+   +-------------------------+   +-------------------------+\r\n          |                               |                               |\r\n          v                               v                               v\r\n| T\u1ea1o m\xe3 m\xe1y tr\u01b0\u1edbc khi ch\u1ea1y |   | \u0110\u1ecdc v\xe0 th\u1ef1c thi t\u1eebng d\xf2ng |   | Bi\xean d\u1ecbch t\u1ea1i th\u1eddi \u0111i\u1ec3m ch\u1ea1y |\r\n| \u2192 nhanh khi ch\u1ea1y        |   | \u2192 ch\u1eadm, nh\u01b0ng linh ho\u1ea1t   |   | \u2192 nhanh nh\u01b0 compiled code  |\r\n| \u2192 T\u1ec7p nh\u1ecb ph\xe2n (.exe)   |   | \u2192 Kh\xf4ng t\u1ea1o file ri\xeang    |   | \u2192 T\u1ed1i \u01b0u theo h\xe0nh vi th\u1eadt |\r\n          |                               |                               |\r\n          v                               v                               v\r\n+-------------------------+   +-------------------------+   +-------------------------+\r\n|   MACHINE CODE (x86)    |   |   AST WALKER / BYTECODE |   |   MACHINE CODE (cached)   |\r\n|   - G\u1ecdi tr\u1ef1c ti\u1ebfp CPU   |   |   - Duy\u1ec7t AST ho\u1eb7c      |   |   - Nh\u01b0 compiler, nh\u01b0ng  |\r\n|   - T\u1ed1c \u0111\u1ed9 cao          |   |     ch\u1ea1y bytecode       |   |     sinh l\xfac ch\u1ea1y        |\r\n|                         |   |   - Kh\xf4ng d\xf9ng CPU hi\u1ec7u |   |   - Code "n\xf3ng" \u0111\u01b0\u1ee3c t\u1ed1i |\r\n|                         |   |     qu\u1ea3 b\u1eb1ng m\xe3 m\xe1y     |   |     \u01b0u m\u1ea1nh              |\r\n+-------------------------+   +-------------------------+   +-------------------------+\r\n          |                               |                               |\r\n          |                               |                               |\r\n          +-------------------------------+-------------------------------+\r\n                                          |\r\n                                          v\r\n                                +-------------------------+\r\n                                |     EXECUTION           |\r\n                                | - CPU ch\u1ea1y m\xe3 m\xe1y       |\r\n                                | - OS c\u1ea5p RAM, t\xe0i nguy\xean|\r\n                                +-------------------------+\r\n\r\n==========================================================================================================\r\n                              CHI TI\u1ebeT: INTERPRETER (TR\xccNH TH\xd4NG D\u1ecaCH)\r\n==========================================================================================================\r\n\r\n+---------------------------------------------------------------------------------------------------------+\r\n|                                         SOURCE CODE                                                     |\r\n|   for i in range(5):                                                                                    |\r\n|       print("Hello", i)                                                                                 |\r\n+---------------------------------------------------------------------------------------------------------+\r\n                                          |\r\n                                          v\r\n                                +-------------------------+\r\n                                |   LEXER & PARSER        |\r\n                                | \u2192 T\u1ea1o AST (Abstract Syntax Tree)                                         |\r\n                                +------------+------------+\r\n                                             |\r\n                                             v\r\n                                +-------------------------+\r\n                                |    INTERPRETER LOOP     |\r\n                                | Duy\u1ec7t AST t\u1eebng n\xfat m\u1ed9t  |\r\n                                | (Recursive Descent)     |\r\n                                +------------+------------+\r\n                                             |\r\n                   +------------------------+-------------------------+\r\n                   |                                                  |\r\n                   v                                                  v\r\n        +---------------------+                           +---------------------+\r\n        |   Built-in Functions  |                           |   Variable Lookup   |\r\n        | - print() \u2192 system call|                          | - T\xecm trong symbol  |\r\n        | - len(), input(), ... |                           |   table (local/global)|\r\n        +----------+----------+                           +----------+----------+\r\n                   |                                                  |\r\n                   +------------------------+-------------------------+\r\n                                            |\r\n                                            v\r\n                                +-------------------------+\r\n                                |     OUTPUT / EFFECT     |\r\n                                | - In ra m\xe0n h\xecnh        |\r\n                                | - Thay \u0111\u1ed5i bi\u1ebfn         |\r\n                                | - G\u1ecdi OS (file, network)|\r\n                                +-------------------------+\r\n\r\nGHI CH\xda:\r\n- Interpreter **kh\xf4ng sinh m\xe3 m\xe1y**, m\xe0 **duy\u1ec7t AST ho\u1eb7c bytecode** \u0111\u1ec3 th\u1ef1c thi.\r\n- M\u1ed7i l\u1ea7n ch\u1ea1y l\u1ea1i duy\u1ec7t l\u1ea1i \u2192 **ch\u1eadm h\u01a1n compiler**.\r\n- D\u1ec5 b\xe1o l\u1ed7i r\xf5 r\xe0ng, h\u1ed7 tr\u1ee3 debug t\u1ed1t.\r\n- D\xf9ng trong: Python (CPython), Ruby, JavaScript (ban \u0111\u1ea7u), PHP.\r\n\r\n==========================================================================================================\r\n                              CHI TI\u1ebeT: JIT (JUST-IN-TIME COMPILER)\r\n==========================================================================================================\r\n\r\n+---------------------------------------------------------------------------------------------------------+\r\n|                                         SOURCE CODE (JavaScript)                                        |\r\n|   function hotFunction(x) {                                                                             |\r\n|       let sum = 0;                                                                                      |\r\n|       for (let i = 0; i < 10000; i++) sum += x;                                                         |\r\n|       return sum;                                                                                       |\r\n|   }                                                                                                     |\r\n+---------------------------------------------------------------------------------------------------------+\r\n                                          |\r\n                                          v\r\n                                +-------------------------+\r\n                                |    AST / BYTECODE       |\r\n                                | (e.g., V8 Ignition)     |\r\n                                +------------+------------+\r\n                                             |\r\n                                             v\r\n                                +-------------------------+\r\n                                |   INTERPRET & PROFILE   |\r\n                                | - Ch\u1ea1y nhanh b\u1eb1ng bytecode | \r\n                                | - Theo d\xf5i: h\xe0m n\xe0o ch\u1ea1y nhi\u1ec1u? |\r\n                                +------------+------------+\r\n                                             |\r\n                                             v\r\n                                +-------------------------+\r\n                                |   JIT COMPILATION       |\r\n                                | (e.g., V8 TurboFan)     |\r\n                                | - Bi\xean d\u1ecbch `hotFunction` \u2192 m\xe3 m\xe1y |\r\n                                | - T\u1ed1i \u01b0u: loop unrolling, inlining |\r\n                                | - Cache l\u1ea1i \u0111\u1ec3 d\xf9ng sau |\r\n                                +------------+------------+\r\n                                             |\r\n                                             v\r\n                                +-------------------------+\r\n                                |   MACHINE CODE (x86/ARM)|\r\n                                | - Ch\u1ea1y nh\u01b0 ch\u01b0\u01a1ng tr\xecnh C++ |\r\n                                | - T\u1ed1c \u0111\u1ed9 g\u1ea7n native     |\r\n                                +-------------------------+\r\n\r\nGHI CH\xda:\r\n- JIT = **Interpreter + Compiler** k\u1ebft h\u1ee3p.\r\n- Ban \u0111\u1ea7u: ch\u1ea1y nh\u01b0 interpreter (nhanh kh\u1edfi \u0111\u1ed9ng).\r\n- Khi ph\xe1t hi\u1ec7n code "n\xf3ng": bi\xean d\u1ecbch \u2192 t\u1ed1i \u01b0u.\r\n- D\xf9ng trong: V8 (Chrome, Node.js), JVM (Java), .NET CLR, PyPy (Python).\r\n\r\n==========================================================================================================\r\n                              SO S\xc1NH T\u1ed4NG H\u1ee2P\r\n==========================================================================================================\r\n\r\n+------------------------+----------------------+------------------------+------------------------+\r\n| \u0110\u1eb7c \u0111i\u1ec3m               |     COMPILER         |      INTERPRETER       |         JIT            |\r\n+------------------------+----------------------+------------------------+------------------------+\r\n| Th\u1eddi gian d\u1ecbch         | Tr\u01b0\u1edbc khi ch\u1ea1y       | Kh\xf4ng d\u1ecbch (ho\u1eb7c bytecode)| L\xfac ch\u1ea1y (runtime)   |\r\n| T\u1ed1c \u0111\u1ed9 th\u1ef1c thi        | R\u1ea5t nhanh            | Ch\u1eadm                    | R\u1ea5t nhanh (sau warm-up)|\r\n| Kh\u1edfi \u0111\u1ed9ng              | Nhanh                | R\u1ea5t nhanh               | Ch\u1eadm h\u01a1n interpreter |\r\n| T\u1ed1i \u01b0u h\xf3a             | M\u1ea1nh (AOT)           | H\u1ea1n ch\u1ebf                 | M\u1ea1nh (d\u1ef1a tr\xean profile)|\r\n| Debugging              | Kh\xf3 h\u01a1n              | D\u1ec5 h\u01a1n                  | Trung b\xecnh             |\r\n| Tri\u1ec3n khai             | File nh\u1ecb ph\xe2n        | File ngu\u1ed3n + runtime    | File + runtime         |\r\n| V\xed d\u1ee5                  | C, C++, Rust, Go     | Python (CPython), Ruby  | Java, JavaScript (V8)  |\r\n+------------------------+----------------------+------------------------+------------------------+\r\n\r\n==========================================================================================================\r\n                              K\u1ebeT LU\u1eacN\r\n==========================================================================================================\r\n\r\n\u2192 **Kh\xf4ng c\xf3 m\xf4 h\xecnh n\xe0o "t\u1ed1t h\u01a1n" ho\xe0n to\xe0n** \u2013 m\u1ed7i c\xe1i ph\xf9 h\u1ee3p v\u1edbi m\u1ee5c \u0111\xedch kh\xe1c nhau:\r\n\r\n- **Compiler**: T\u1ed1i \u01b0u hi\u1ec7u su\u1ea5t, d\xf9ng cho h\u1ec7 th\u1ed1ng, game, OS.\r\n- **Interpreter**: T\u1ed1i \u01b0u ph\xe1t tri\u1ec3n, debug, d\xf9ng cho scripting, web.\r\n- **JIT**: C\xe2n b\u1eb1ng gi\u1eefa hi\u1ec7u su\u1ea5t v\xe0 linh ho\u1ea1t \u2013 l\xfd t\u01b0\u1edfng cho m\xf4i tr\u01b0\u1eddng runtime ph\u1ee9c t\u1ea1p.\r\n\r\n\ud83d\udca1 **Xu h\u01b0\u1edbng hi\u1ec7n \u0111\u1ea1i**:  \r\nH\u1ea7u h\u1ebft ng\xf4n ng\u1eef \u0111\u1ec1u d\xf9ng **k\u1ebft h\u1ee3p**:  \r\n- Python: CPython (interpreter) \u2192 PyPy (JIT)  \r\n- JavaScript: Ban \u0111\u1ea7u interpreter \u2192 V8 d\xf9ng JIT  \r\n- Java: Bytecode \u2192 JVM + JIT (HotSpot)  \r\n\r\n\u2192 **"Bi\xean d\u1ecbch hay th\xf4ng d\u1ecbch?"** kh\xf4ng c\xf2n l\xe0 c\xe2u h\u1ecfi nh\u1ecb ph\xe2n \u2013 m\xe0 l\xe0 **"k\u1ebft h\u1ee3p nh\u01b0 th\u1ebf n\xe0o \u0111\u1ec3 t\u1ed1i \u01b0u?"**\n'})})}function T(n={}){const{wrapper:r}={...(0,h.R)(),...n.components};return r?(0,i.jsx)(r,{...n,children:(0,i.jsx)(u,{...n})}):u(n)}},8453:(n,r,t)=>{t.d(r,{R:()=>o,x:()=>c});var e=t(6540);const i={},h=e.createContext(i);function o(n){const r=e.useContext(h);return e.useMemo(function(){return"function"==typeof n?n(r):{...r,...n}},[r,n])}function c(n){let r;return r=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:o(n.components),e.createElement(h.Provider,{value:r},n.children)}}}]);