"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4913],{2938:(n,r,e)=>{e.r(r),e.d(r,{assets:()=>u,contentTitle:()=>i,default:()=>h,frontMatter:()=>s,metadata:()=>t,toc:()=>C});const t=JSON.parse('{"id":"Computer Fundamentals/Computer Architecture/Core","title":"Core","description":"","source":"@site/docs/00_Computer Fundamentals/Computer Architecture/Core.md","sourceDirName":"00_Computer Fundamentals/Computer Architecture","slug":"/Computer Fundamentals/Computer Architecture/Core","permalink":"/ecosys.documents/docs/Computer Fundamentals/Computer Architecture/Core","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Computer Architecture","permalink":"/ecosys.documents/docs/Computer Fundamentals/Computer Architecture/"},"next":{"title":"ISA","permalink":"/ecosys.documents/docs/Computer Fundamentals/Computer Architecture/ISA"}}');var c=e(4848),o=e(8453);const s={},i=void 0,u={},C=[];function a(n){const r={code:"code",pre:"pre",...(0,o.R)(),...n.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{children:"+==================================================================+\r\n|                   CPU CORE HI\u1ec6N \u0110\u1ea0I (1 nh\xe2n)                     |\r\n|       (D\xf9ng \u0111\u1ed3ng th\u1eddi t\u1ea5t c\u1ea3 k\u1ef9 thu\u1eadt \u0111\u1ec3 \u0111\u1ea1t IPC > 3)            |\r\n+==================================================================+\r\n\r\n  +---------------------+\r\n  |  Instruction Fetch  | \u2190 L\u1ea5y l\u1ec7nh t\u1eeb L1i Cache\r\n  +----------+----------+\r\n             |\r\n             v\r\n  +---------------------+\r\n  |  Instruction Decode | \u2190 Gi\u1ea3i m\xe3 l\u1ec7nh (CISC \u2192 \xb5ops n\u1ebfu c\u1ea7n)\r\n  +----------+----------+\r\n             |\r\n             v\r\n  +---------------------------+\r\n  |  \u03bcop Cache / Scheduler    | \u2190 Chu\u1ea9n b\u1ecb l\u1ec7nh cho pipeline\r\n  |  (Out-of-Order Engine)    | \u2190 S\u1eafp x\u1ebfp l\u1ea1i l\u1ec7nh \u0111\u1ec3 t\u1ed1i \u01b0u\r\n  +-------------+-------------+\r\n                |\r\n        +-------v--------+     +-------------------------+\r\n        |   PIPELINE     | --\x3e |   EXECUTION UNITS (\xd7N)  |\r\n        | (IF \u2192 ID \u2192 EX) |     | - ALU \xd7 4               |\r\n        |                |     | - FPU \xd7 2               |\r\n        |                |     | - Load/Store Unit \xd7 2   |\r\n        |                |     | - Branch Unit           |\r\n        +----------------+     +------------+------------+\r\n                                            |\r\n                                            v\r\n                                 +----------------------+\r\n                                 |    DATA CACHE (L1d)  |\r\n                                 +-----------+----------+\r\n                                             |\r\n                                             v\r\n                                 +-----------------------+\r\n                                 |       REGISTER FILE   |\r\n                                 | (Rename, Bypass Logic)|\r\n                                 +-----------------------+\r\n\r\n                +-----------------------------------------+\r\n                |       C\xc1C K\u1ef8 THU\u1eacT C\xd9NG HO\u1ea0T \u0110\u1ed8NG        |\r\n                +-----------------------------------------+\r\n                | \u2022 PIPELINE: D\xe2y chuy\u1ec1n l\u1ec7nh (5\u201314 stage)|\r\n                | \u2022 SUPERSCALAR: 4\u20136 l\u1ec7nh/chu k\u1ef3          |\r\n                | \u2022 OUT-OF-ORDER: T\u1ed1i \u01b0u th\u1ee9 t\u1ef1 th\u1ef1c thi  |\r\n                | \u2022 BRANCH PREDICTOR: \u0110\u1ed9 ch\xednh x\xe1c >95%   |\r\n                | \u2022 SIMD (AVX/NEON): X\u1eed l\xfd vector         |\r\n                | \u2022 REGISTER RENAMING: Tr\xe1nh xung \u0111\u1ed9t     |\r\n                +-----------------------------------------+\n"})}),"\n",(0,c.jsx)(r.pre,{children:(0,c.jsx)(r.code,{children:"==================================================================\r\n             C\u1ea4U TR\xdaC B\xcaN TRONG M\u1ed8T CPU CORE (\u0110\u01a0N GI\u1ea2N, R\xd5 R\xc0NG)\r\n==================================================================\r\n\r\n                              +---------------------+\r\n                              |     CLOCK SIGNAL    |\r\n                              +----------+----------+\r\n                                         |\r\n                                         v\r\n                    +------------------------------------------+\r\n                    |             CONTROL UNIT (CU)            |\r\n                    |  - Gi\u1ea3i m\xe3 l\u1ec7nh (Decode)                 |\r\n                    |  - \u0110i\u1ec1u khi\u1ec3n c\xe1c kh\u1ed1i kh\xe1c              |\r\n                    |  - Qu\u1ea3n l\xfd pipeline                      |\r\n                    +------------------------------------------+\r\n                              |        |        |\r\n              (Fetch addr)    |        | (Control signals)\r\n                              v        |        v\r\n             +----------------+    +---+----+    +-------------------------------+\r\n             | INSTRUCTION    |    |        |    |        REGISTER FILE          |\r\n             |   CACHE (L1i)  |    |        |    |  - RAX, RBX, RCX, RDX, ...     |\r\n             +--------+-------+    |        |    |  - RSP, RBP, RDI, RSI, ...     |\r\n                      |            |        |    |  - 16+ general-purpose regs   |\r\n                      |            |        |    +---------------+---------------+\r\n                      v            |        |                    |\r\n        +----------------------+   |        |                    |\r\n        | INSTRUCTION FETCH    |<--+        |                    |\r\n        |  & SEQUENCER (IF)    |            |                    |\r\n        +----------+-----------+            |                    |\r\n                   |                        |                    |\r\n                   v                        v                    v\r\n        +----------------------+    +----------------+    +------------------+\r\n        | INSTRUCTION DECODE   |    | BRANCH         |    | RESERVATION      |\r\n        |       (ID)           |    | PREDICTION     |    | STATIONS (RS)    |\r\n        | - Ph\xe2n t\xedch l\u1ec7nh     |    | - BTB, RAS     |    | - Ch\u1edd operand    |\r\n        +----------+-----------+    +--------+-------+    +--------+---------+\r\n                   |                        |                     |\r\n                   v                        |                     |\r\n        +----------------------+            |                     |\r\n        |    REORDER BUFFER    |<-----------+---------------------+\r\n        |       (ROB)          |            | (Control & status)\r\n        | - Commit l\u1ec7nh \u0111\xfang th\u1ee9 t\u1ef1 |\r\n        +----------+-----------+\r\n                   |\r\n                   v\r\n        +----------------------+\r\n        | EXECUTION UNITS      |\r\n        |                      |\r\n        |  +----------------+  |\r\n        |  |     ALU x4     |  |  (Integer: ADD, SUB, AND, OR)\r\n        |  +----------------+  |\r\n        |  +----------------+  |\r\n        |  |     FPU x2     |  |  (Floating-point & SIMD - SSE/AVX)\r\n        |  +----------------+  |\r\n        |  +----------------+  |\r\n        |  | LOAD/STORE x2  |  |  (Truy c\u1eadp b\u1ed9 nh\u1edb)\r\n        |  +----------------+  |\r\n        |  +----------------+  |\r\n        |  |   BRANCH UNIT  |  |  (So s\xe1nh, nh\u1ea3y)\r\n        |  +----------------+  |\r\n        +----------+---------+\r\n                   |\r\n                   v\r\n        +----------------------+\r\n        | DATA CACHE (L1d)     |\r\n        | - 32\u201348KB, 8-way     |\r\n        | - Truy c\u1eadp: ~4 cycles|\r\n        +----------+-----------+\r\n                   |\r\n                   v\r\n        +----------------------+\r\n        |    L2 CACHE (1\u20132MB)  |\r\n        | - Ri\xeang cho m\u1ed7i core |\r\n        | - ~12 cycles         |\r\n        +----------+-----------+\r\n                   |\r\n                   v\r\n        +----------------------+\r\n        |    L3 CACHE (LLC)    |\r\n        | - Shared gi\u1eefa c\xe1c core|\r\n        | - 10\u2013100MB, ring bus |\r\n        +----------+-----------+\r\n                   |\r\n                   v\r\n        +----------------------+\r\n        |   MEMORY CONTROLLER  |\r\n        | (IMC - Integrated)   |\r\n        | \u2192 K\u1ebft n\u1ed1i t\u1edbi RAM    |\r\n        +----------------------+\n"})})]})}function h(n={}){const{wrapper:r}={...(0,o.R)(),...n.components};return r?(0,c.jsx)(r,{...n,children:(0,c.jsx)(a,{...n})}):a(n)}},8453:(n,r,e)=>{e.d(r,{R:()=>s,x:()=>i});var t=e(6540);const c={},o=t.createContext(c);function s(n){const r=t.useContext(o);return t.useMemo(function(){return"function"==typeof n?n(r):{...r,...n}},[r,n])}function i(n){let r;return r=n.disableParentContext?"function"==typeof n.components?n.components(c):n.components||c:s(n.components),t.createElement(o.Provider,{value:r},n.children)}}}]);